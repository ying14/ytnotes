---
format: pdf
# format: native
keep-md: true
keep-tex: true
keep-yaml: true
editor: source
# number-sections: true
execute: 
  echo: false
  warning: false
geometry: margin=.5in #nothing in margin
mainfont: Arial # NIH should be >=11pt, Arial, Georgia, Helvetica, or Palatino Linotype
fontsize: 11pt
# linestretch: 1
indent: true
subparagraph: true
filters: 
  - latex-environment
  # - pandoc-wrapfig.lua
  - ying_filters.lua
environments: [wrapfigure]
# commands: [wrapfigx]
header-includes:
  - \usepackage{wrapfig}    #to be able to wrap text around figures
  - \usepackage{graphicx}
bibliography: references.bib
csl: nature.csl
---

```{r}
#| eval: false
shell.exec("research-strategy.pdf")
```

```{r}
library(tidyverse)
library(yingtools2)
library(knitr)
library(xtable)

# wrapfigure is a latex extension. In latex, it looks like this:
# \begin{wrapfigure}[lineheight]{position}{width}
# ....
# \end{wrapfigure}
# position can be r, l, R, L
# width can be 0.4\linewidth
defOut <- knitr::knit_hooks$get("plot")
knitr::knit_hooks$set(plot = function(x, options) {  # set new plot hook ...

  # if(!is.null(options$wrapfigure)) {  # then, if option wrapfigure is given ...
  if(!is.null(options[["wrapfig-pos"]])) {  # then, if option wrapfigure is given ...
    # create the new opening string for the wrapfigure environment ...
    position <- options[["wrapfig-pos"]]
    width <- options[["wrapfig-width"]]
    # position <- options$wrapfigure[[1]]
    # width <- options$wrapfigure[[2]]
    label <- options$label
    caption <- options$fig.cap
    new.x <- paste0("\\begin{wrapfigure}{",position,"}{",width,"}
    {\\centering \\includegraphics{",x,"}
    }
    \\caption{\\label{",label,"}",caption,"}
    \\end{wrapfigure}")
    return(new.x)
  } else {
    return(defOut(x,options))  
  }
})
```


```{r}
#| eval: false

#need to install latex environment, with mods.
system("quarto install --no-prompt extension quarto-ext/latex-environment")
shell.exec("research-strategy.pdf")
lua_filter_file <- "_extensions/quarto-ext/latex-environment/latex-environment.lua"
code <- readr::read_file(lua_filter_file) %>% 
  str_replace_all(fixed("quarto.doc.is_format(\"latex\")"),"true")
write_file(code,lua_filter_file)
```


# Research Strategy

## Significance

#### Important significance topic.

`r paste(stringi::stri_rand_lipsum(2, start_lipsum = FALSE), collapse = "\n\n")`

Here is a sentence with citation using bibliography. [@cordonnier2009randomized] The sentence has multiple references. [@adibi2012reduction; @gold2008human; @roach1991ciprofloxacin]
Black-Scholes (@eq-black-scholes) is a mathematical model that seeks to explain the behavior of financial derivatives, most commonly options:

$$
\frac{\partial \mathrm C}{ \partial \mathrm t } + \frac{1}{2}\sigma^{2} \mathrm S^{2}
\frac{\partial^{2} \mathrm C}{\partial \mathrm C^2}
  + \mathrm r \mathrm S \frac{\partial \mathrm C}{\partial \mathrm S}\ =
  \mathrm r \mathrm C 
$$ {#eq-black-scholes}

Here is a bulleted list:

- Some bullets may be helpful to the reviewers here.
- Some bullets may be helpful to the reviewers here too.

(@)  My first example.
(@)  My second example.

Explanation of examples.

(@)  My third example will be numbered (3).
(@good)  My fourth example will be numbered (3).
As (@good) illustrates, ...


`r paste(stringi::stri_rand_lipsum(4, start_lipsum = FALSE), collapse = "\n\n")` 
{{helloworld}}

#### Another important significance topic.

`r paste(stringi::stri_rand_lipsum(1, start_lipsum = FALSE), collapse = "\n\n")` 
Here is a picture, see @fig-stamp1.

![stamp A. This is a red version of the stamp. It is square.](stamp1a.jpg){#fig-stamp1}

Here is an inline picture, denoted by ![](stamp1a.jpg){height="1em"}.
`r paste(stringi::stri_rand_lipsum(1, start_lipsum = FALSE), collapse = "\n\n")` 
Here is a `ggplot`-generated plot, see reference to See @fig-mtcars1.

```{r}
#| label: fig-mtcars1
#| fig-cap: Plot of Mtcars. X-axis represents miles per gallon, Y-axis represents disp, color denotes number of cylinders.
#| fig-width: 4
#| fig-height: 1.25
#| fig-pos: h

# ! - (ignore restrictions), 
# h - in-line (“here”)
# t - float top area
# b - float bottom area
# p - float page/col area
ggplot(mtcars,aes(x=mpg,y=disp,color=factor(cyl))) + geom_point()
```

`r paste(stringi::stri_rand_lipsum(1, start_lipsum = FALSE), collapse = "\n\n")` Here is a table reference, see @tbl-mtcars.

```{r}
#| label: tbl-mtcars
#| tbl-cap: Table of MTcars
kable(mtcars[1:4,1:4])
```

`r paste(stringi::stri_rand_lipsum(1, start_lipsum = FALSE), collapse = "\n\n")` 


## Innovation

`r paste(stringi::stri_rand_lipsum(1, start_lipsum = FALSE), collapse = "\n\n")`

::: {.wrapfigure arguments="r}{4in"}
This is a text box. This is a text box. This is a text box. This is a text box. This is a text box. This is a text box. This is a text box. This is a text box. This is a text box. This is a text box. This is a text box. This is a text box. This is a text box. This is a text box. This is a text box. This is a text box. This is a text box. This is a text box. This is a text box. This is a text box. This is a text box. This is a text box. This is a text box. This is a text box. 
:::

`r paste(stringi::stri_rand_lipsum(1, start_lipsum = FALSE), collapse = "\n\n")`

## Approach

### Overview of the proposal

`r paste(stringi::stri_rand_lipsum(2, start_lipsum = FALSE), collapse = "\n\n")`
Please see @tbl-mtcars-wrap.

::: {.wrapfigure arguments="l}{0.4\\linewidth"}
```{r}
#| label: tbl-mtcars-wrap
#| tbl-cap: table examining Mtcars data. 
kable(mtcars[1:4,1:4])
```
:::

`r paste(stringi::stri_rand_lipsum(2, start_lipsum = FALSE), collapse = "\n\n")` 

### Research team

`r paste(stringi::stri_rand_lipsum(3, start_lipsum = FALSE), collapse = "\n\n")`
One sentence. xxxxxx. Look at @fig-scatterwrap


```{r}
#| label: fig-scatterwrap
#| fig-cap: Plot of MTcars
#| wrapfig-pos: r
#| wrapfig-width: 4in

ggplot(mtcars,aes(x=mpg,y=hp,size=wt,color=factor(gear))) + geom_point(alpha=0.75)

```



`r paste(stringi::stri_rand_lipsum(5, start_lipsum = FALSE), collapse = "\n\n")` 


### Preliminary studies

`r paste(stringi::stri_rand_lipsum(4, start_lipsum = FALSE), collapse = "\n\n")` 
See @fig-combined.


```{r}
g.height <- ggplot(starwars) + geom_histogram(aes(x=height),fill="steelblue",color="black")

g.mass <- ggplot(starwars) + geom_histogram(aes(x=mass),fill="pink",color="black")

g.scatter <- ggplot(starwars,aes(x=mass,y=height,label=name,color=homeworld)) + 
  geom_point() +  
  geom_text(check_overlap = TRUE) +
  scale_x_continuous(trans="log10") +
  theme(legend.position="none")
```



```{r}
#| out-width: 100%
#| fig.width: 8
#| fig.height: 4.5
#| label: fig-combined
#| fig-cap: Plot of star wars data

library(grid)
library(gridExtra)
g.a <- g.height + ggplot2::labs(tag="A")
g.b <- g.mass + ggplot2::labs(tag="B")
g.c <- g.scatter + ggplot2::labs(tag="C")

g.row1 <- arrangeGrob(g.a,g.b,nrow=1)
g.all <- arrangeGrob(g.row1,g.c)
grid.draw(g.all)
```

`r paste(stringi::stri_rand_lipsum(1, start_lipsum = FALSE), collapse = "\n\n")` 

### Resources

`r paste(stringi::stri_rand_lipsum(2, start_lipsum = FALSE), collapse = "\n\n")`



### Design and methods for Aim 1

`r paste(stringi::stri_rand_lipsum(2, start_lipsum = FALSE), collapse = "\n\n")`

### Design and methods for Aim 2

`r paste(stringi::stri_rand_lipsum(2, start_lipsum = FALSE), collapse = "\n\n")`

### Design and methods for Aim 3

`r paste(stringi::stri_rand_lipsum(2, start_lipsum = FALSE), collapse = "\n\n")`

### Timeline

There are lots of good examples of `R`-based Gantt charts to be found by clever Googling. For displaying progress with sidebar annotations by aim, I particularly like [\underline{this}](https://datascienceplus.com/visualize-your-cvs-timeline-with-r-gantt-style/) example from the [\underline{lares}](https://github.com/laresbernardo/lares) package.

### Rigor and reproducibility

`r paste(stringi::stri_rand_lipsum(2, start_lipsum = FALSE), collapse = "\n\n")`

### Impact of the proposed study

`r paste(stringi::stri_rand_lipsum(1, start_lipsum = FALSE), collapse = "\n\n")`

{{< pagebreak >}}

## References {.unnumbered}

::: {#refs}
:::
