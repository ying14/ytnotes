library(tidyverse)
mt <- mtcars %>% mutate(cyl=factor(cyl))
model <- lm(mpg ~ hp,data=mt)
mt$yhat <- predict(model)
tidy(model)
ggplot(mt) +
geom_point(aes(x=hp,y=mpg)) +
geom_line(aes(x=hp,y=yhat),color="red")
model <- lm(mpg ~ hp,data=mt)
ci <- predict(model,interval="confidence") %>% cbind(mt)
pi <- predict(model,interval="prediction") %>% cbind(mt)
tidy(model)
ggplot(mt) +
geom_point(aes(x=hp,y=mpg)) +
geom_line(data=pi,aes(x=hp,y=fit,color="predicted")) +
geom_ribbon(data=pi,aes(x=hp,ymin=lwr,ymax=upr,fill="predicted"),alpha=0.35,show.legend=FALSE) +
geom_line(data=ci,aes(x=hp,y=fit,color="confidence")) +
geom_ribbon(data=ci,aes(x=hp,ymin=lwr,ymax=upr,fill="confidence"),alpha=0.35,show.legend=FALSE)
model <- lm(mpg ~ hp + cyl, data=mt)
tidy(model)
pdata <- tibble(hp=seq_range(mt$hp,n=200)) %>%
expand_grid(cyl=mt$cyl)
pdata$yhat <- predict(model,newdata=pdata)
ggplot() +
geom_point(data=mt, aes(x=hp,y=mpg,color=cyl)) +
geom_line(data=pdata, aes(x=hp,y=yhat,color=cyl))
model <- lm(mpg ~ hp + cyl + hp*cyl, data=mt)
tidy(model)
pdata <- tibble(hp=seq_range(mt$hp,n=200)) %>%
expand_grid(cyl=mt$cyl)
pdata$yhat <- predict(model,newdata=pdata)
ggplot() +
geom_point(data=mt, aes(x=hp,y=mpg,color=cyl)) +
geom_line(data=pdata, aes(x=hp,y=yhat,color=cyl))
library(minpack.lm)
model <- nlsLM(conc ~ a * exp(-b*time), start=list(a=1,b=1), data=Indometh)
tidy(model)
pdata <- tibble(time=seq_range(Indometh$time,n=200))
pdata$yhat <- predict(model,newdata=pdata)
ggplot() +
geom_point(data=Indometh, aes(x=time,y=conc)) +
geom_line(data=pdata, aes(x=time,y=yhat),color="red")
mt <- mtcars %>% mutate(gas.guzzler=as.numeric(mpg<22.5))
model <- glm(gas.guzzler ~ disp + am, data=mt,family="binomial")
tidy(model, exponentiate = TRUE)
pdata <- crossing(disp=seq_range(mt$disp,n=200),
am=mt$am)
pdata$yhat <- predict(model,newdata=pdata,type="response")
ggplot() +
geom_point(data=mt,aes(x=disp,y=gas.guzzler,color=factor(am))) +
geom_line(data=pdata, aes(x=disp,y=yhat,color=factor(am)))
library(glmnet)
y <- mtcars$hp
x <- mtcars %>% dplyr::select(mpg, wt, drat, qsec) %>% as.matrix()
#find optimal lambda value that minimizes test MSE
cv_model <- cv.glmnet(x, y, alpha = 0)
best_lambda <- cv_model$lambda.min
model <- glmnet(x, y, alpha = 0, lambda = best_lambda)
coef(model)
#calculate R-squared
y_predicted <- predict(model, s = best_lambda, newx = x)
sst <- sum((y - mean(y))^2)
sse <- sum((y_predicted - y)^2)
#find R-Squared
rsq <- 1 - sse/sst
rsq
y <- mtcars$hp
x <- mtcars %>% select(mpg, wt, drat, qsec) %>% as.matrix()
model <- glmnet(x, y, alpha = 1)
#find optimal lambda value that minimizes test MSE
cv_model <- cv.glmnet(x, y, alpha = 1)
best_lambda <- cv_model$lambda.min
model <- glmnet(x, y, alpha = 1, lambda = best_lambda)
coef(model)
#calculate R-squared
y_predicted <- predict(model, s = best_lambda, newx = x)
sst <- sum((y - mean(y))^2)
sse <- sum((y_predicted - y)^2)
#find R-Squared
rsq <- 1 - sse/sst
rsq
library(lme4)
view.predict <- function(fit) {
data1 %>% mutate(pred_dist = fitted(fit)) %>%
ggplot(aes(x=age, y=pred_dist, group=Subject, color=Subject)) + theme_classic() +
geom_line(size=1)
}
data1 <- Orthodont %>% mutate(Subject=factor(Subject,ordered=FALSE))
Orthodont
library(lme4)
library(nlme)
view.predict <- function(fit) {
data1 %>% mutate(pred_dist = fitted(fit)) %>%
ggplot(aes(x=age, y=pred_dist, group=Subject, color=Subject)) + theme_classic() +
geom_line(size=1)
}
data1 <- Orthodont %>% mutate(Subject=factor(Subject,ordered=FALSE))
data1 %>%
ggplot(aes(x=age, y=distance, group=Subject, color=Subject, linetype=Sex)) +
geom_line(size=1) + theme_classic()
mod1 <- lmer(distance ~ (1|Subject), data=data1, REML=F)
view.predict(mod1)
library(glmnet)
y <- mtcars$hp
x <- mtcars %>% dplyr::select(mpg, wt, drat, qsec) %>% as.matrix()
#find optimal lambda value that minimizes test MSE
cv_model <- cv.glmnet(x, y, alpha = 0)
best_lambda <- cv_model$lambda.min
model <- glmnet(x, y, alpha = 0, lambda = best_lambda)
coef(model)
#calculate R-squared
y_predicted <- predict(model, s = best_lambda, newx = x)
sst <- sum((y - mean(y))^2)
sse <- sum((y_predicted - y)^2)
#find R-Squared
rsq <- 1 - sse/sst
rsq
tidy(mod4)
mod4
# Random intercept and random slope (correlated)
mod4 <- lmer(distance ~ age + (1+age|Subject), data=data1, REML=F)
summary(mod4)
tidy(mod4)
class(mod4)
ggplot(mtcars,aes(x=mpg,y=hp,color=factor(cyl),size=disp)) + geom_point(alpha=0.5)
library(tidyverse)
library(tidyverse)
ggplot(mtcars,aes(x=mpg,y=hp,color=factor(cyl),size=disp)) + geom_point(alpha=0.5)
ggplot(mtcars,aes(x=mpg,y=hp,color=factor(cyl),size=disp)) + geom_point(alpha=0.75)
g <- ggplot(mtcars,aes(x=mpg,y=hp,color=factor(cyl),size=disp)) + geom_point(alpha=0.75)
ggsave(file="mtcars.svg", plot=g, width=10, height=8)
getwd()
#| eval: false
#| include: false
# not run
g <- ggplot(mtcars,aes(x=mpg,y=hp,color=factor(cyl),size=disp)) + geom_point(alpha=0.75)
ggsave(file="mtcars.eps", plot=g, width=10, height=8)
knitr::knit_hooks$get("plot")
xx <- knitr::knit_hooks$get("plot")
xx
xx <- knitr::knit_hooks$get("document")
xx
qplot(cars$speed, cars$dist)
"\begin{wrapfigure}[18]{l}{0.25\textwidth}
\centering
"\\begin{wrapfigure}[18]{l}{0.25\textwidth}
"\\begin{wrapfigure}[18]{l}{0.25\textwidth}
\\centering
\\includegraphics[width=0.22\\textwidth,height=0.22\\textwidth]{stamp1a.jpg}
\\caption{\\label{fig-wrap2}caption here. A cup of sugar makes sweet fudge. Place a rosebush near the porch steps.}
\\vspace{-6pt}
\\end{wrapfigure}"
"\\begin{{wrapfigure}}[18]{l}{0.25\textwidth}
\\centering
\\includegraphics[width=0.22\\textwidth,height=0.22\\textwidth]{stamp1a.jpg}
\\caption{\\label{fig-wrap2}caption here. A cup of sugar makes sweet fudge. Place a rosebush near the porch steps.}
\\vspace{-6pt}
\\end{wrapfigure}"
x <- "\\begin{{wrapfigure}}[18]{l}{0.25\textwidth}
\\centering
\\includegraphics[width=0.22\\textwidth,height=0.22\\textwidth]{stamp1a.jpg}
\\caption{\\label{fig-wrap2}caption here. A cup of sugar makes sweet fudge. Place a rosebush near the porch steps.}
\\vspace{-6pt}
\\end{wrapfigure}"
cat(x)
x <- "\\begin{{wrapfigure}}[18]{l}{0.25\\textwidth}
\\centering
\\includegraphics[width=0.22\\textwidth,height=0.22\\textwidth]{stamp1a.jpg}
\\caption{\\label{fig-wrap2}caption here. A cup of sugar makes sweet fudge. Place a rosebush near the porch steps.}
\\vspace{-6pt}
\\end{wrapfigure}"
cat(x)
#| eval: false
taur.salary <- 212100
peled.salary <- 212100
frame.salary <- 96760
# 96,760
taur.effort * taur.salary
library(knitr)
library(tidyverse)
library(yingtools2)
library(patchwork)
defOut <- knitr::knit_hooks$get("plot")  # save the default plot hook
knitr::knit_hooks$set(plot = function(x, options) {  # set new plot hook ...
x <- defOut(x, options)  # first apply the default hook
if(!is.null(options$wrapfigure)) {  # then, if option wrapfigure is given ...
# create the new opening string for the wrapfigure environment ...
wf <- sprintf("\\begin{wrapfigure}{%s}{%g\\textwidth}", options$wrapfigure[[1]], options$wrapfigure[[2]])
x  <- gsub("\\begin{figure}", wf, x, fixed = T)  # and replace the default one with it.
x  <- gsub("{figure}", "{wrapfigure}", x, fixed = T)  # also replace the environment ending
}
return(x)
})
show.effort <- function(effort) {
months <- effort * 12
if (effort==0) {
text <- "no salary support requested"
} else {
text <- str_glue("{months} cal months, {scales::percent(effort)} effort")
}
return(text)
}
taur.effort <- 0.4
peled.effort <- 0.05
frame.effort <- 1.0
#| echo: false
n.samps <- 250
reads <- 20
cost <- 240
tcost <- n.samps * cost
#| eval: false
taur.salary <- 212100
peled.salary <- 212100
frame.salary <- 96760
# 96,760
taur.effort * taur.salary
taur.effort
# 96,760
taur.effort * taur.salary
peled.effort * peled.salary
# 96,760
taur.effort * taur.salary
peled.effort * peled.salary
63630/19216
10605/3203
93941/28370
63630+19216
(63630+19216)/19216
212100*0.36
212100*taur.effort*0.36
taur.salary*taur.effort
63,630
19,216
82,846
63630
taur.salary*taur.effort
82846/84840
peled.effort * peled.salary
taur.salary*taur.effort/82846
peled.effort * peled.salary / 13808
taur.salary*taur.effort/82846
peled.effort * peled.salary / 13808
taur.salary*taur.effort/82846
peled.effort * peled.salary / 13808
124800
.36/12
93,941/0.75
93941/0.75
125254 * 0.75
taur.salary <- 212100
peled.salary <- 212100
gradissimo.salary <- 124800
frame.salary <- 125254
fringe <- 0.302
taur.salary*taur.effort * (1+fringe)
taur.salary * taur.effort * (1+fringe) +
peled.salary * peled.effort * (1+fringe) +
gradissimo.salary * gradissimo.effort * (1+fringe) +
frame.salary * frame.effort * (1+fringe)
taur.effort <- 0.3
peled.effort <- 0.05
gradissimo.effort <- 0.03
frame.effort <- 1.0
taur.salary <- 212100
peled.salary <- 212100
gradissimo.salary <- 124800
frame.salary <- 125254
fringe <- 0.302
taur.salary * taur.effort * (1+fringe) +
peled.salary * peled.effort * (1+fringe) +
gradissimo.salary * gradissimo.effort * (1+fringe) +
frame.salary * frame.effort * (1+fringe)
taur.salary * taur.effort * (1+fringe)
peled.salary * peled.effort * (1+fringe)
taur.salary * taur.effort * (1+fringe)
peled.salary * peled.effort * (1+fringe)
gradissimo.salary * gradissimo.effort * (1+fringe)
frame.salary * frame.effort * (1+fringe)
frame.effort <- 0.75
taur.salary * taur.effort * (1+fringe) +
peled.salary * peled.effort * (1+fringe) +
gradissimo.salary * gradissimo.effort * (1+fringe) +
frame.salary * frame.effort * (1+fringe)
taur.salary * taur.effort * (1+fringe) +
peled.salary * peled.effort * (1+fringe) +
gradissimo.salary * gradissimo.effort * (1+fringe) +
frame.salary * frame.effort * (1+fringe)
wages <- taur.salary * taur.effort * (1+fringe) +
peled.salary * peled.effort * (1+fringe) +
gradissimo.salary * gradissimo.effort * (1+fringe) +
frame.salary * frame.effort * (1+fringe)
tcost
compute <- 1200
compute <- 1200 * 5
compute
wages
total.wages <- wages * 5
tcost
.libPaths()
Sys.getenv("R_LIBS_USER")
.libPaths
.libPaths()
library(yingtools2)
library(tidyverse)
.libPaths() %>% copy.as.Rcode()
setwd("C:/Users/Ying/Desktop/samples/ana samples")
csv <- read_csv("AGtest.samps.csv")
load("human_microbiota_dada2.RData")
csv$Sample_ID
csv$Pilot
samps <- csv %>% filter(Pilot=="yes")
csv %>% count(Pilot)
samps$Sample_ID
samp$Sample_ID
samp %>% glimpse
samps$Sample_ID
samps$Sample_ID
csv.samps <- csv %>% filter(Pilot=="yes")
samp$Sample_ID
samp$Sample_ID
rm(samps)
s <- get.samp(phy.dada2)
csv.samps$Sample_ID %in% s$Sample_ID
csv.samps$Sample_ID
csv.samps$Sample_ID
s <- get.samp(phy.dada2) %>% filter(Sample_ID %in% csv.samps$Sample_ID)
s
s$sample
phy <- prune_samples(s$sample,phy.dada2)
phy <- prune_samples(s$sample,phy.dada2) %>% prune_unused_taxa()
phy
phy
write_rds(phy,file="ana_pilot_samples_25.rds")
phy <- read_rds("ana_pilot_samples_25.rds")
library(yingtools2)
library(tidyverse)
phy <- read_rds("ana_pilot_samples_25.rds")
rm(list=ls())
phy <- read_rds("ana_pilot_samples_25.rds")
otu <- get.otu.melt(phy)
ggplot(otu,aes(x=sample,y=pctseqs))
otu
otu$sample
ggplot(otu,aes(x=sample,y=pctseqs))
ggplot(otu,aes(x=sample,y=pctseqs,fill=Species))
otu
otu$pctseqs
ggplot(otu,aes(x=sample,y=pctseqs,fill=Species))
ggplot(otu,aes(x=sample,y=pctseqs,fill=Species)) +
geom_col(show.legend=FALSE)
ggplot(otu,aes(x=sample,y=pctseqs,fill=Species)) +
geom_taxonomy()
ggplot(otu,aes(x=sample,y=pctseqs,fill=Species,label=Species)) +
geom_taxonomy()
ggplot(otu,aes(x=Sample_ID,y=pctseqs,fill=Species,label=Species)) +
geom_taxonomy()
ggplot(otu,aes(x=Sample_ID,y=pctseqs,fill=otu,label=Species)) +
geom_taxonomy()
ggplot(otu,aes(x=Sample_ID,y=numseqs,fill=otu,label=Species)) +
geom_taxonomy()
ggplot(otu,aes(x=Sample_ID,y=numseqs,fill=otu,label=Species)) +
geom_taxonomy() +
scale_y_continuous(trans=log_epsilon_trans(1000))
ggplot(otu,aes(x=Sample_ID,y=pctseqs,fill=otu,label=Species)) +
geom_taxonomy() +
theme(axis.text.x=element_text(angle=90))
ggplot(otu,aes(x=Sample_ID,y=numseqs,fill=otu,label=Species)) +
geom_taxonomy() +
scale_y_continuous(trans=log_epsilon_trans(1000)) +
theme(axis.text.x=element_text(angle=90))
ggplot(otu,aes(x=Sample_ID,y=pctseqs,fill=otu,label=Species)) +
geom_taxonomy() +
theme(axis.text.x=element_text(angle=90))
g.stack <- ggplot(otu,aes(x=Sample_ID,y=pctseqs,fill=otu,label=Species)) +
geom_taxonomy() +
theme(axis.text.x=element_text(angle=90))
g.pct <- ggplot(otu,aes(x=Sample_ID,y=pctseqs,fill=otu,label=Species)) +
geom_taxonomy() +
theme(axis.text.x=element_text(angle=90))
g.num <- ggplot(otu,aes(x=Sample_ID,y=numseqs,fill=otu,label=Species)) +
geom_taxonomy() +
scale_y_continuous(trans=log_epsilon_trans(1000)) +
theme(axis.text.x=element_text(angle=90))
g.pct <- ggplot(otu,aes(x=Sample_ID,y=pctseqs,fill=otu,label=Species)) +
geom_taxonomy() +
theme(axis.text.x=element_text(angle=90))
g.pct
g.num <- ggplot(otu,aes(x=Sample_ID,y=numseqs,fill=otu,label=Species)) +
geom_taxonomy() +
scale_y_continuous(trans=log_epsilon_trans(1000)) +
theme(axis.text.x=element_text(angle=90))
g.num
dist <- distance(phy,"horn")
dist
hc <- hclust(dist)
lim <- range(hc$order) + c(-0.5,0.5)
tr <- as.phylo(hc)
gt <- ggtree(tr) + coord_flip(ylim=lim,expand=FALSE) + scale_x_reverse()
gt
library(ggtree)
dist <- distance(phy,"horn")
hc <- hclust(dist)
lim <- range(hc$order) + c(-0.5,0.5)
tr <- as.phylo(hc)
library(ape)
tr <- as.phylo(hc)
gt <- ggtree(tr) + coord_flip(ylim=lim,expand=FALSE) + scale_x_reverse()
gt
ggplot(otu2,aes(x=sample,y=pctseqs,fill=Species)) +
geom_taxonomy()
otu2 <- phy.sub %>% get.otu.melt() %>%
mutate(sample=factor(sample,levels=hc$labels[hc$order]))
ggplot(otu2,aes(x=sample,y=pctseqs,fill=Species)) +
geom_taxonomy()
otu2 <- phy %>% get.otu.melt() %>%
mutate(sample=factor(sample,levels=hc$labels[hc$order]))
ggplot(otu2,aes(x=sample,y=pctseqs,fill=Species)) +
geom_taxonomy()
ggplot(otu2,aes(x=sample,y=pctseqs,fill=Species,label=Species)) +
geom_taxonomy()
ggplot(otu2,aes(x=sample,y=pctseqs,fill=otu,label=Species)) +
geom_taxonomy()
ggplot(otu2,aes(x=sample,y=pctseqs,fill=otu,label=Species)) +
geom_taxonomy() +
coord_cartesian(xlim=lim,expand=FALSE)
dist <- distance(phy,"horn")
hc <- hclust(dist)
lim <- range(hc$order) + c(-0.5,0.5)
tr <- as.phylo(hc)
gt <- ggtree(tr) + coord_flip(ylim=lim,expand=FALSE) + scale_x_reverse()
otu2 <- phy %>% get.otu.melt() %>%
mutate(sample=factor(sample,levels=hc$labels[hc$order]))
g.tax <- ggplot(otu2,aes(x=sample,y=pctseqs,fill=otu,label=Species)) +
geom_taxonomy() +
coord_cartesian(xlim=lim,expand=FALSE)
gt
library(patchwork)
gt / g.tax
gg.stack(gt,g.tax)
gg.stack(gt,g.tax,heights=c(1,2))
ggplot(otu,aes(x=Sample_ID,y=pctseqs,fill=otu,label=Species)) +
geom_taxonomy() +
theme(axis.text.x=element_text(angle=90))
ggplot(otu,aes(x=Sample_ID,y=numseqs,fill=otu,label=Species)) +
geom_taxonomy() +
scale_y_continuous(trans=log_epsilon_trans(1000)) +
theme(axis.text.x=element_text(angle=90))
dist <- distance(phy,"horn")
hc <- hclust(dist)
lim <- range(hc$order) + c(-0.5,0.5)
tr <- as.phylo(hc)
gt <- ggtree(tr) + coord_flip(ylim=lim,expand=FALSE) + scale_x_reverse()
otu2 <- phy %>% get.otu.melt() %>%
mutate(sample=factor(sample,levels=hc$labels[hc$order]))
g.tax <- ggplot(otu2,aes(x=sample,y=pctseqs,fill=otu,label=Species)) +
geom_taxonomy() +
coord_cartesian(xlim=lim,expand=FALSE)
gg.stack(gt,g.tax,heights=c(1,2))
g.tax <- ggplot(otu2,aes(x=sample,y=pctseqs,fill=otu,label=Species)) +
geom_taxonomy() +
coord_cartesian(xlim=lim,expand=FALSE) +
theme(axis.text.x=element_text(angle=90))
gg.stack(gt,g.tax,heights=c(1,2))
dist <- get.distance("taxhorn")
dist <- calc.distance(phy,"taxhorn")
hc <- hclust(dist)
lim <- range(hc$order) + c(-0.5,0.5)
tr <- as.phylo(hc)
gt <- ggtree(tr) + coord_flip(ylim=lim,expand=FALSE) + scale_x_reverse()
otu2 <- phy %>% get.otu.melt() %>%
mutate(sample=factor(sample,levels=hc$labels[hc$order]))
g.tax <- ggplot(otu2,aes(x=sample,y=pctseqs,fill=otu,label=Species)) +
geom_taxonomy() +
coord_cartesian(xlim=lim,expand=FALSE) +
theme(axis.text.x=element_text(angle=90))
gg.stack(gt,g.tax,heights=c(1,2))
library(yingtools2)
library(tidyverse)
library(ggtree)
library(ape)
rm(list=ls())
phy <- read_rds("ana_pilot_samples_25.rds")
otu <- get.otu.melt(phy)
ggplot(otu,aes(x=Sample_ID,y=pctseqs,fill=otu,label=Species)) +
geom_taxonomy() +
theme(axis.text.x=element_text(angle=90))
ggplot(otu,aes(x=Sample_ID,y=numseqs,fill=otu,label=Species)) +
geom_taxonomy() +
scale_y_continuous(trans=log_epsilon_trans(1000)) +
theme(axis.text.x=element_text(angle=90))
dist <- calc.distance(phy,"taxhorn")
hc <- hclust(dist)
lim <- range(hc$order) + c(-0.5,0.5)
tr <- as.phylo(hc)
gt <- ggtree(tr) + coord_flip(ylim=lim,expand=FALSE) + scale_x_reverse()
otu2 <- phy %>% get.otu.melt() %>%
mutate(sample=factor(sample,levels=hc$labels[hc$order]))
g.tax <- ggplot(otu2,aes(x=sample,y=pctseqs,fill=otu,label=Species)) +
geom_taxonomy() +
coord_cartesian(xlim=lim,expand=FALSE) +
theme(axis.text.x=element_text(angle=90))
gg.stack(gt,g.tax,heights=c(1,2))
phy
setwd("C:/Users/Ying/Desktop/samples/ana samples")
load("human_microbiota_dada2.RData")
csv <- read_csv("AGtest.samps.csv")
csv.samps <- csv %>% filter(Pilot=="yes")
csv.samps$Sample_ID %in% s$Sample_ID
phy <- prune_samples(s$sample,phy.dada2)
phy
library(ade4)
library(vegan)
