if (verbose) {
cli::cli_warn(c(`!` = "No GitHub releases found for {.val {repo}}!","You can make a new one with {.fun piggyback::pb_new_release}"))
}
return(invisible(data.frame()))
}
out <- data.frame(release_name = vapply(releases, `[[`, character(1),"name"),
release_id = vapply(releases, `[[`, integer(1),"id"),
release_body = vapply(releases, `[[`, character(1),"body"),
tag_name = vapply(releases, `[[`, character(1),"tag_name"),
draft = vapply(releases, `[[`, logical(1),"draft"),
created_at = vapply(releases, `[[`, character(1),"created_at"),
published_at = vapply(releases, `[[`,character(1), "published_at"),
html_url = vapply(releases,`[[`, character(1), "html_url"),
upload_url = vapply(releases,`[[`, character(1), "upload_url"),
n_assets = vapply(releases,function(x) length(x[["assets"]]), integer(1)))
return(out)
}
# used by pb_upload_file2
# uses get_release_assets2
pb_info2 <- function (repo = paste(gh::gh_tree_remote(), collapse = "/"),
tag = NULL,
.api_url = gh:::default_api_url(),
.token = gh::gh_token(.api_url)) {
r <- parse_repo2(repo)
releases <- pb_releases2(repo = repo, .token = .token,
.api_url = .api_url,
verbose = FALSE)
if (nrow(releases) == 0) {
return(data.frame(file_name = "", size = 0L, timestamp = lubridate::as_datetime(0),
tag = "", owner = r[[1]], repo = r[[2]], upload_url = "",
browser_download_url = "", id = "", state = "", stringsAsFactors = FALSE))
}
if (length(tag) == 1 && tag == "latest" && !"latest" %in% releases$tag_name)
tag <- releases$tag_name[[1]]
if (!is.null(tag))
releases <- releases[releases$tag_name %in% tag, ]
info <- get_release_assets2(releases = releases, r = r,
.api_url=.api_url,
.token = .token)
return(info)
}
# uses pb_info2, pb_releases2
pb_upload_file2 <- function(file,
repo = paste(gh::gh_tree_remote(), collapse = "/"),
tag = "latest", name = NULL,
overwrite = "use_timestamps",
use_timestamps = NULL,
show_progress = TRUE,
.api_url = gh:::default_api_url(),
.token = gh::gh_token(.api_url),
dir = NULL) {
file_path <- do.call(file.path, compact(list(dir, file)))
if (!file.exists(file_path)) {
cli::cli_warn("File {.file {file_path}} does not exist.")
return(NULL)
}
if (!is.null(use_timestamps)) {
cli::cli_warn("{.code use_timestamps} argument is deprecated, please set {.code overwrite = 'use_timestamps'} instead")
}
use_timestamps <- switch(as.character(overwrite),
`TRUE` = FALSE,
`FALSE` = FALSE,
use_timestamps = TRUE
)
overwrite <- switch(as.character(overwrite),
`TRUE` = TRUE,
`FALSE` = FALSE,
use_timestamps = TRUE
)
progress <- httr::progress("up")
if (!show_progress) {
progress <- NULL
}
if (is.null(name)) {
name <- basename(file_path)
}
df <- pb_info2(repo = repo, tag = tag,
.api_url = .api_url,
.token = .token)
i <- which(df$file_name == name)
if (length(i) > 0) {
if (use_timestamps) {
local_timestamp <- fs::file_info(file_path)$modification_time
no_update <- local_timestamp <= df[i, "timestamp"]
if (no_update) {
cli::cli_warn("Matching or more recent version of {.file {file_path}} found on GH, not uploading.")
return(invisible(NULL))
}
}
if (overwrite) {
gh::gh("DELETE /repos/:owner/:repo/releases/assets/:id",
owner = df$owner[[1]], repo = df$repo[[1]], id = df$id[i],
.api_url = .api_url,
.token = .token)
} else {
cli::cli_warn("Skipping upload of {.file {df$file_name[i]}} as file exists on GitHub and {.code overwrite = FALSE}")
return(invisible(NULL))
}
}
if (show_progress) {
cli::cli_alert_info("Uploading {.file {name}} ...")
}
releases <- pb_releases2(repo = repo,
.api_url = .api_url,
.token = .token)
upload_url <- releases$upload_url[releases$tag_name == tag]
r <- httr::RETRY(
verb = "POST", url = sub("\\{.+$", "", upload_url),
query = list(name = name),
httr::add_headers(Authorization = paste("token",.token)),
body = httr::upload_file(file_path),
progress,
terminate_on = c(400, 401, 403, 404, 422)
)
if (show_progress) {
httr::warn_for_status(r)
}
# .pb_cache_clear()
invisible(r)
}
# used by pb_info2
get_release_assets2 <- function(releases, r,
.api_url = gh:::default_api_url(),
.token = gh::gh_token(.api_url)) {
if (nrow(releases) == 0) {
return(data.frame())
}
asset_list <- vector("list", length = nrow(releases))
for (i in seq_along(releases$tag_name)) {
a <- gh::gh(
endpoint = "/repos/:owner/:repo/releases/:release_id/assets",
owner = r[[1]], repo = r[[2]],
release_id = releases$release_id[[i]],
.limit = Inf,
.api_url = .api_url,
.token = .token,
.progress = TRUE
)
if (length(a) == 0) {
next
}
if (!identical(a[[1]], "")) {
a_df <- data.frame(
file_name = vapply(a, `[[`, character(1),"name"),
size = vapply(a, `[[`, integer(1), "size"),
timestamp = lubridate::as_datetime(vapply(a,`[[`, character(1), "updated_at")),
tag = releases$tag_name[i],
owner = r[[1]],
repo = r[[2]],
upload_url = releases$upload_url[i],
browser_download_url = vapply(a, `[[`, character(1L),"browser_download_url"),
id = vapply(a, `[[`,integer(1L), "id"),
state = vapply(a, `[[`,character(1L), "state"), stringsAsFactors = FALSE)
asset_list[[i]] <- a_df
}
}
release_assets <- do.call(rbind, asset_list)
return(release_assets)
}
# uses pb_releases2, pb_release_create2
pb_upload2 <- function (file,
repo = paste(gh::gh_tree_remote(), collapse = "/"),
tag = "latest", name = NULL,
overwrite = "use_timestamps",
use_timestamps = NULL,
show_progress = TRUE,
.api_url = gh:::default_api_url(),
.token = gh::gh_token(.api_url),
dir = NULL) {
stopifnot(is.character(repo), is.character(tag), length(tag) == 1, length(repo) == 1)
releases <- pb_releases2(repo = repo,
.api_url = .api_url,
.token = .token)
if (tag == "latest" && length(releases$tag_name) > 0 &&
!"latest" %in% releases$tag_name) {
if (getOption("piggyback.verbose", default = interactive())) {
cli::cli_alert_info("Uploading to latest release: {.val {releases$tag_name[[1]]}}.")
}
tag <- releases$tag_name[[1]]
}
if (!tag %in% releases$tag_name && !interactive()) {
cli::cli_abort("Release {.val {tag}} not found in {.val {repo}}. No upload performed.")
}
if (!tag %in% releases$tag_name) {
cli::cli_alert_warning("Release {.val {tag}} not found in {.val {repo}}, creating.")
pb_release_create2(repo = repo, tag = tag,
.api_url = .api_url,
.token = .token)
# cli::cli_alert_warning("Release {.val {tag}} not found in {.val {repo}}.")
# run <- utils::menu(choices = c("Yes", "No"), title = glue::glue("Would you like to create a new release now?"))
# if (run == 2)
#   return(invisible(NULL))
# if (run == 1)
#   pb_release_create2(repo = repo, tag = tag,
#                      .api_url = .api_url,
#                      .token = .token)
Sys.sleep(2)
}
out <- lapply(file, function(f) pb_upload_file2(file=f, repo=repo, tag=tag, name=name,
overwrite=overwrite,
use_timestamps=use_timestamps, show_progress=show_progress,
.token=.token,
.api_url=.api_url,
dir=dir))
invisible(out)
}
# used by pb_upload2
pb_release_create2 <- function (repo = paste(gh::gh_tree_remote(), collapse = "/"),
tag, commit = NULL,
name = tag,
body = "Data release",
draft = FALSE,
prerelease = FALSE,
.api_url = gh:::default_api_url(),
.token = gh::gh_token(.api_url)) {
releases <- pb_releases2(repo = repo,
.token = .token,
.api_url=.api_url,
verbose = FALSE)
if (nrow(releases) > 0 && tag %in% releases$tag_name) {
cli::cli_warn("Failed to create release: {.val {tag}} already exists!")
return(invisible(releases[tag %in% releases$tag_name, ]))
}
r <- parse_repo2(repo)
payload <- compact(list(tag_name = tag, target_commitish = commit,
name = name, body = body, draft = draft, prerelease = prerelease))
# .api_url <- gh:::default_api_url()
resp <- httr::RETRY(verb = "POST", url = glue::glue("{.api_url}/repos/{r[[1]]}/{r[[2]]}/releases"),
httr::add_headers(Authorization = paste("token", .token)),
body = jsonlite::toJSON(payload, auto_unbox = TRUE),
terminate_on = c(400, 401, 403, 404, 422))
if (httr::http_error(resp)) {
cli::cli_warn(c(`!` = "Failed to create release: HTTP error {.val {httr::status_code(resp)}}.",
"See returned error messages for more details"))
return(httr::content(resp))
}
# .pb_cache_clear()
release <- httr::content(resp)
cli::cli_alert_success("Created new release {.val {name}}.")
return(invisible(release))
}
# 1. uses gh_download_asset2, pb_info2
pb_download2 <- function(file = NULL, dest = ".",
repo = paste(gh::gh_tree_remote(), collapse = "/"),
tag = "latest",
overwrite = TRUE, ignore = "manifest.json", use_timestamps = TRUE,
show_progress = TRUE,
.api_url = gh:::default_api_url(),
.token = gh::gh_token(.api_url)) {
progress <- httr::progress("down")
if (!show_progress) {
progress <- NULL
}
df <- pb_info2(repo=repo, tag=tag,
.api_url=.api_url,
.token=.token)
df <- df[df$state != "starter", ]
if (!is.null(file)) {
i <- which(df$file_name %in% file)
if (length(i) < 1) {
cli::cli_warn("file(s) {.file {file}} not found in repo {.val {repo}}")
}
df <- df[i, ]
} else {
i <- which(df$file_name %in% ignore)
if (length(i) >= 1) {
df <- df[-i, ]
}
file <- df$file_name
}
if (length(dest) == 1) {
i <- which(df$file_name %in% file)
dest <- file.path(dest, df$file_name[i])
}
df$dest <- dest
if (use_timestamps) {
local_timestamp <- fs::file_info(dest)$modification_time
update <- df$timestamp > local_timestamp
update[is.na(update)] <- TRUE
df <- df[update, ]
if (dim(df)[[1]] < 1) {
cli::cli_alert_info("All local files already up-to-date!")
return(invisible(NULL))
}
}
resp <- lapply(seq_along(df$id), function(i) {
gh_download_asset2(owner=df$owner[[1]],
repo=df$repo[[1]],
id = df$id[i], destfile = df$dest[i], overwrite = overwrite,
.api_url=.api_url,
.token = .token, progress = progress
)
})
return(invisible(resp))
}
# used by pb_download2
gh_download_asset2 <- function(owner, repo, id, destfile,
overwrite = TRUE,
.api_url = gh:::default_api_url(),
.token = gh::gh_token(.api_url),
progress = httr::progress("down")) {
if (fs::file_exists(destfile) && !overwrite) {
cli::cli_warn(c(
`!` = "{.val {destfile}} already exists, skipping download.",
"Set {.code overwrite = TRUE} to overwrite files."
))
return(NULL)
}
if (!is.null(progress)) {
cli::cli_alert_info("Downloading {.val {basename(destfile)}}...")
}
auth_token <- if (!is.null(.token) && .token != "") {
httr::add_headers(Authorization = paste("token", .token))
}
# .api_url <- gh:::default_api_url()
resp <- httr::RETRY(
verb = "GET",
url = paste0(.api_url,"/repos/", owner, "/", repo, "/", "releases/assets/",id),
httr::add_headers(Accept = "application/octet-stream"),
auth_token, httr::write_disk(destfile, overwrite = overwrite),
progress
)
if (resp$status_code == 400) {
resp <- httr::RETRY(verb = "GET",
url = resp$url, httr::add_headers(Accept = "application/octet-stream"),
auth_token, httr::write_disk(destfile, overwrite = TRUE),
progress)
}
# if (TRUEgetOption("piggyback.verbose", default = TRUE)) {httr::warn_for_status(resp)}
httr::warn_for_status(resp)
invisible(resp)
}
get_gitrepo <- function(path=".") {
tryCatch({
paste(gh::gh_tree_remote(path), collapse = "/")
},error=function(e) {
stop("YTError: No Git repo detected.")
})
}
get_giturl <- function(path=".") {
tryCatch({
gert::git_remote_list(repo=path)$url
},error=function(e) {
stop("YTError: no git URL detected")
})
}
get_gitapi <- function(path=".") {
git.url <- get_giturl(path=path)
git.base <- str_extract(git.url,"https?://[^/]+")
if (git.base=="https://github.com") {
git.api <- "https://api.github.com"
} else {
git.api <- paste0(git.base,"/api/v3")
}
return(git.api)
}
get_gittoken <- function(path=".") {
tryCatch({
api <- get_gitapi(path=path)
gh::gh_token(api_url = api)
},error=function(e) {
NULL
})
}
upload_git_release <- function(files,
tag = "v1.0",
path = ".",
repo = get_gitrepo(path=path),
api = get_gitapi(path=path),
token = get_gittoken(path=path)) {
assertthat::assert_that(file.exists(file),msg="YTError: file does not exist")
for (file in files) {
pb_upload2(file,
tag=tag,
repo=repo,
.api_url = api,
.token=token)
}
}
download_git_release <- function(tag = "latest",
path = ".",
dest = "data",
repo = get_gitrepo(path=path),
api = get_gitapi(path=path),
token = get_gittoken(path=path)) {
if (!dir.exists(dest)) {
cli::cli_text("Creating folder {.file {dest}}.")
dir.create(dest, showWarnings = FALSE)
}
pb_download2(tag=tag,
dest=dest,
repo=repo,
.api_url = api,
.token=token)
}
if (FALSE) {
mt1 <- mtcars %>% mutate(version=3)
iris1 <- iris %>% mutate(version=1)
write_csv(mt1,file="mt1.csv")
write_csv(iris1,file="iris1.csv")
mt2 <- mtcars %>% mutate(version=2)
iris2 <- iris %>% mutate(version=2)
write_csv(mt2,file="mt2.csv")
write_csv(iris2,file="iris2.csv")
# ytnotes
upload_git_release(c("mt1.csv","iris1.csv"))
download_git_release()
debugonce(gh_download_asset2)
pb_releases()
pb_release_create(tag="v1.0.0")
pb_upload("mt1.csv",tag="v1.0.0")
pb_download()
# testpackage
# pb_releases2()
# pb_release_create(tag="v1.0.0")
# pb_upload("mt1.csv",tag="v1.0.0")
# pb_download()
repo <- get_gitrepo()
url <- get_giturl()
api <- get_gitapi()
token <- get_gittoken()
pb_releases2(.token=token,.api_url = api)
pb_release_create2(repo=repo,
.api_url = api,
tag="v0.0.1")
pb_upload2("mt1.csv",tag="v0.0.1",.api_url = api,.token=token)
pb_upload2("iris1.csv",tag="v0.0.1",.api_url = api,.token=token)
pb_download2(tag="v0.0.1",.api_url = api,.token=token)
pb_download2(tag="v0.0.1",.api_url = api,.token=NULL)
##### github
# Sys.setenv("GITHUB_API_URL"="")
# pb_releases("ying14/yingtools2")
pb_releases2("ying14/yingtools2")
# piggyback:::pb_info("ying14/yingtools2")
pb_info2("ying14/yingtools2")
pb_info2("ying14/yingtools2",tag="latest")
pb_upload2("mt1.csv",tag="v0.0.1",repo="ying14/yingtools2")
pb_upload2("iris1.csv",tag="v0.0.1",repo="ying14/yingtools2")
pb_upload2("mt2.csv",tag="v0.0.2",repo="ying14/yingtools2")
pb_upload2("iris2.csv",tag="v0.0.2",repo="ying14/yingtools2")
pb_download2(repo="ying14/yingtools2")
##### github enterprise
# Sys.setenv("GITHUB_API_URL"="https://github.mskcc.org/api/v3")
# pb_releases("taury/testpackage")
pb_releases2("taury/testpackage",.api_url="https://github.mskcc.org/api/v3")
# piggyback:::pb_info("taury/testpackage")
pb_info2("taury/testpackage",.api_url="https://github.mskcc.org/api/v3")
pb_info2("taury/testpackage",.api_url="https://github.mskcc.org/api/v3",tag="latest")
pb_upload2("mt1.csv",tag="v0.0.1",repo="taury/testpackage",.api_url="https://github.mskcc.org/api/v3")
pb_upload2("iris1.csv",tag="v0.0.1",repo="taury/testpackage",.api_url="https://github.mskcc.org/api/v3")
pb_upload2("mt2.csv",tag="v0.0.2",repo="taury/testpackage",.api_url="https://github.mskcc.org/api/v3")
pb_upload2("iris2.csv",tag="v0.0.2",repo="taury/testpackage",.api_url="https://github.mskcc.org/api/v3")
pb_download2(repo="taury/testpackage",.api_url="https://github.mskcc.org/api/v3")
}
download_git_release()
download_git_release()
mt1 <- mtcars %>% mutate(version=1)
upload_git_release(c("mt1.csv","iris1.csv"))
library(yingtools2)
upload_git_release(c("mt1.csv","iris1.csv"))
mt1 <- mtcars %>% mutate(version=1)
library(tidyverse)
library(yingtools2)
mt1 <- mtcars %>% mutate(version=1)
iris1 <- iris %>% mutate(version=1)
write_csv(mt1,file="mt1.csv")
write_csv(iris1,file="iris1.csv")
mt2 <- mtcars %>% mutate(version=2)
iris2 <- iris %>% mutate(version=2)
write_csv(mt2,file="mt2.csv")
write_csv(iris2,file="iris2.csv")
upload_git_release(c("mt1.csv","iris1.csv"))
download_git_release()
# Run this to download data from ying14/ytnotes
# Git API: https://api.github.com
# Data files: mt1.csv, iris1.csv
if (!require("yingtools2") || packageVersion("yingtools2")<"0.0.1.174") {
remotes::install_github("ying14/yingtools2")
}
yingtools2::download_git_release()
# Run this to download data from ying14/ytnotes
# Git API: https://api.github.com
# Data files: mt1.csv, iris1.csv
if (!require("yingtools2") || packageVersion("yingtools2")<"0.0.1.174") {
remotes::install_github("ying14/yingtools2")
}
yingtools2::download_git_release()
ansi_palette_show()
library(tidyverse)
library(yingtools2)
library(cli)
{
cli_text("variables: {.var variable}")
cli_text("value: {.val {12}}")
cli_text("packages: {.pkg yingtools2}")
cli_text("functions: {.fn mutate}")
cli_text("class: {.cls {class(1234)}}")
cli_text("code: {.code x <- 1+2+3}")
cli_text("italics/emphasis: {.emph italics here}")
cli_text("Bold: {style_bold('bold text here')}")
cli_text("Inverse: {style_inverse('inverese text here')}")
cli_text("Color: {col_br_magenta('magenta text here')}")
cli_text("environment variable: {.envvar BLASTDB}")
cli_text("field: {.field field}")
cli_text("file: {.file readme.txt}")
cli_text("Keyboard: press {.kbd ctrl+spacebar}")
cli_text("Put something in quotes: He said, {.str where are you?}")
cli_text("Help page of a topic (clickable): check out the {.topic mutate} command")
cli_text("URLs: {.url http://www.google.com}")
cli_text("Hyperlinks: {.href http://www.google.com}")
}
ansi_palette_show()
