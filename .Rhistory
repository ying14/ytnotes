"taxon_name"=col_skip()
)
library(tidyverse)
diamonds
band_members
band_instruments
reticulate::repl_python()
import polars as pl
diamonds_polars = pl.from_pandas(r.diamonds)
band_members_polars = pl.from_pandas(r.band_members)
band_instruments_polars = pl.from_pandas(r.band_instruments)
quit
tibble(
id=1:3,
color=c("blue","red","green"),
size=c("small","medium","large")
)
reticulate::repl_python()
pl.DataFrame(
{
'id': [1, 2, 3],
'color': ['blue', 'red', 'green'],
'size': ['small', 'medium', 'large']
}
).to_pandas()
quit
file <- "kaiju_summary.tsv"
cols <- list(
"outfile"=col_character(),
"percent"=col_double(),
"numseqs"=col_integer(),
"taxid"=col_character(),
"taxon_name"=col_skip()
)
table <- read_tsv(file,
skip=1,
col_names=names(cols),
col_types=cols,
na=c("", "NA"))
reticulate::repl_python()
cols = {
'outfile':pl.Utf8,
'percent':pl.Float64,
'numseqs':pl.Int64,
'taxid':pl.Utf8,
'taxon_name':None
}
# read_csv method:
columns = [i for i,v in enumerate(cols.values()) if v is not None]
new_columns = [k for k,v in cols.items() if v is not None]
dtypes = {k:v for k,v in cols.items() if v is not None}
table = pl.read_csv(r.file,
skip_rows=1,
separator='\t',
has_header=False,
null_values=['','NA'],
columns=columns,
new_columns=new_columns,
dtypes=dtypes)
quit
table
reticulate::repl_python()
table
table
table.to_pandas()
table
dtypes=dtypes).to_pandas()
table
quit
py$table
py$table
table
reticulate::repl_python()
r.table
table
type(r.table)
type(table)
columns = [i for i,v in enumerate(cols.values()) if v is not None]
new_columns = [k for k,v in cols.items() if v is not None]
dtypes = {k:v for k,v in cols.items() if v is not None}
table = pl.read_csv(r.file,
skip_rows=1,
separator='\t',
has_header=False,
null_values=['','NA'],
columns=columns,
new_columns=new_columns,
dtypes=dtypes).to_pandas()
type(table)
r.table)
r.table
table
quit
ls()
py
library(reticulate)
py
py$table
table
py$table
table2 <- py$table
compare(table,table2)
library(yingtools2)
library(yingtools2)
ibrary(yingtools2)
library(yingtools2)
compare(table,table2)
table
py$table
table %>% glimpse
py$table %>% glimpse
table %>% glimpse
table <- table %>% arrange(outfile)
table2 <- py$table %>% arrange(outfile)
compare(table,table2)
table %>% glimpse
py$table %>% glimpse
table <- read_tsv(file)
table <- read_tsv(file)
file <- "kaiju_summary.tsv"
table <- read_tsv(file)
rm(table,table2)
table <- read_tsv(file)
table
reticulate::repl_python()
table = pl.read_csv(r.file,separator='\t')
quit
library(yingtools2)
StatTaxonomy
StatTaxonomy$setup_data
StatTaxonomy$compute_layer
StatTaxonomy$compute_group
StatTaxonomy$compute_panel
otu <- cid.phy %>%
get.otu.melt() %>%
filter(Patient_ID=="179")
# by sample
ggplot(data=otu,aes(x=sample,y=pctseqs,fill=otu,label=Genus)) +
geom_taxonomy()
# by sample
ggplot(data=otu,aes(x=sample,y=numseqs,fill=otu,label=Genus)) +
geom_taxonomy()
# by sample
ggplot(data=otu,aes(x=sample,y=pctseqs,fill=otu,label=Genus)) +
geom_taxonomy() +
log_epsilon_trans(0.001)
# by sample
ggplot(data=otu,aes(x=sample,y=pctseqs,fill=otu,label=Genus)) +
geom_taxonomy() +
scale_y_continuous(trans=log_epsilon_trans(0.001))
# by sample
ggplot(data=otu,aes(x=sample,y=numseqs,fill=otu,label=Genus)) +
geom_taxonomy() +
scale_y_continuous(trans=log_epsilon_trans(100))
# by sample
ggplot(data=otu,aes(x=sample,y=numseqs,fill=otu,label=Genus)) +
geom_col() +
scale_y_continuous(trans=log_epsilon_trans(100))
# by sample
ggplot(data=otu,aes(x=sample,y=numseqs,fill=otu,label=Genus)) +
geom_col(show.legend = FALSE) +
scale_y_continuous(trans=log_epsilon_trans(100))
library(tidyverse)
diamonds
band_members
band_instruments
reticulate::repl_python()
import polars as pl
diamonds_polars = pl.from_pandas(r.diamonds)
band_members_polars = pl.from_pandas(r.band_members)
band_instruments_polars = pl.from_pandas(r.band_instruments)
quit
tibble(
id=1:3,
color=c("blue","red","green"),
size=c("small","medium","large")
)
reticulate::repl_python()
pl.DataFrame(
{
'id': [1, 2, 3],
'color': ['blue', 'red', 'green'],
'size': ['small', 'medium', 'large']
}
).to_pandas()
quit
table <- read_tsv(file,na=c("","NA"))
file <- "kaiju_summary.tsv"
table <- read_tsv(file,na=c("","NA"))
file <- "kaiju_summary.tsv"
table <- read_tsv(file,na=c("","NA"))
file <- "kaiju_summary.tsv"
table <- read_tsv(file,col_names=TRUE,na=c("","NA"))
file <- "kaiju.tsv"
table <- read_tsv(file,col_names=TRUE)
file <- "kaiju.out"
table <- read_tsv(file,col_names=TRUE)
table
table <- read_tsv(file,col_names=FALSE)
table %>% glimpse
file <- "kaiju_summary.tsv"
table <- read_tsv(file,na=c("","NA"))
reticulate::repl_python()
table = pl.read_csv(r.file,
separator='\t',
null_values=['','NA'])
quit
table1 <- table %>% arrange(taxid)
table1 <- table %>% arrange(taxid)
table
table1 <- table %>% arrange(file)
table2 <- py$table %>% arrange(file)
library(reticulate)
table1 <- table %>% arrange(file)
table2 <- py$table %>% arrange(file)
py$table
reticulate::repl_python()
table = pl.read_csv(r.file, separator='\t').to_pandas()
quit
table1 <- table %>% arrange(file)
table2 <- py$table %>% arrange(file)
reticulate::repl_python()
table = pl.read_csv(r.file, separator='\t').to_pandas()
quit
file <- "kaiju.out"
table <- read_tsv(file,col_names=)
reticulate::repl_python()
table = pl.read_csv(r.file, separator='\t').to_pandas()
quit
library(reticulate)
table1 <- table %>% arrange(file)
table2 <- py$table %>% arrange(file)
all.equal(table1,table2)
table1
table1 %>% glimpse
file <- "kaiju_summary.tsv"
table <- read_tsv(file,na=c("","NA"))
reticulate::repl_python()
table = pl.read_csv(r.file,
separator='\t',
null_values=['','NA'])
quit
library(reticulate)
table1 <- table %>% arrange(file)
table2 <- py$table %>% arrange(file)
reticulate::repl_python()
table = pl.read_csv(r.file,
separator='\t',
null_values=['','NA']).to_pandas()
`
quit
table1 <- table %>% arrange(file)
table2 <- py$table %>% arrange(file)
all.equal(table1,table2)
table1 %>% glimpse()
table2 %>% glimpse()
table1
table2 %>% glimpse()
table1$file
table1$file==table2$file
tab(table1$file==table2$file)
library(yingtools21)
library(yingtools2)
tab(table1$file==table2$file)
table1
tab(table1$percent==table2$percent)
table1
compare(table1,table2)
table1[999,]
xx <- full_join(table1,table2,by="file")
table1
table1 <- table %>% arrange(taxon_id)
table2 <- py$table %>% arrange(taxon_id)
table1 %>% glimpse()
table2 %>% glimpse()
compare(table1,table2)
table1 <- table %>% arrange(taxon_id)
table2 <- py$table %>% arrange(taxon_id)
table1 %>% glimpse()
table2 %>% glimpse()
all.equal(table1,table2)
compare(table1,table2,by="taxon_Id")
compare(table1,table2,by="taxon_id")
xx <- compare(table1,table2,by="taxon_id")
table1$taxon_id
all.equal(table1,table2)
xx$.status
tab(xx$.status)
xx %>% filter(is.na(.status))
library(tidyverse)
diamonds
band_members
band_instruments
reticulate::repl_python()
import polars as pl
diamonds_polars = pl.from_pandas(r.diamonds)
band_members_polars = pl.from_pandas(r.band_members)
band_instruments_polars = pl.from_pandas(r.band_instruments)
quit
tibble(
id=1:3,
color=c("blue","red","green"),
size=c("small","medium","large")
)
reticulate::repl_python()
pl.DataFrame(
{
'id': [1, 2, 3],
'color': ['blue', 'red', 'green'],
'size': ['small', 'medium', 'large']
}
).to_pandas()
quit
diamonds$color #method 1
diamonds[["color"]] #method 2
diamonds %>% pull(color) #method 3
reticulate::repl_python()
diamonds_polars['color'] #method 1
diamonds_polars.get_column('color') #method 2
quit
file <- "kaiju_summary.tsv"
table <- read_tsv(file,na=c("","NA"))
reticulate::repl_python()
table = pl.read_csv(r.file,
separator='\t',
null_values=['','NA']).to_pandas()
quit
table <- read_tsv(file,col_names=c("classified","header","taxid","score","taxid_list","acccession_list","matching_seq"))
table %>% glimpse
reticulate::repl_python()
table = pl.read_csv(r.file, separator='\t', has_header=False).to_pandas()
table
quit
file <- "kaiju.out"
table <- read_tsv(file,col_names=c("classified","header","taxid","score","taxid_list","acccession_list","matching_seq"))
reticulate::repl_python()
table = pl.read_csv(r.file, separator='\t', has_header=False).to_pandas()
table
table = pl.read_csv(r.file, separator='\t',
has_header=False,
new_columns = ['classified','header','taxid','score','taxid_list','acccession_list','matching_seq']).to_pandas()
table
quit
library(reticulate)
table1 <- table %>% arrange(taxon_id)
table1 %>% glimpse()
table2 %>% glimpse()
table1 %>% glimpse()
table
table1 <- table %>% arrange(taxon_id)
table2 <- py$table %>% arrange(taxon_id)
table1 <- table %>% arrange(taxid)
table2 <- py$table %>% arrange(taxid)
table1 %>% glimpse()
table2 %>% glimpse()
table2$taxid_list
reticulate::repl_python()
table = pl.read_csv(r.file,
separator='\t',
has_header=False,
new_columns = ['classified','header','taxid','score','taxid_list','acccession_list','matching_seq'],
null_values=['','NA']).to_pandas()
`
table = pl.read_csv(r.file,
separator='\t',
has_header=False,
new_columns = ['classified','header','taxid','score','taxid_list','acccession_list','matching_seq']).to_pandas()
`
table = pl.read_csv(r.file,
separator='\t',
has_header=False,
new_columns = ['classified','header','taxid','score','taxid_list','acccession_list','matching_seq']).to_pandas()
quit
file <- "kaiju.out"
table <- read_tsv(file,col_names=c("classified","header","taxid","score","taxid_list","acccession_list","matching_seq"))
# either C or U, indicating whether the read is classified or unclassified.
# name of the read
# NCBI taxon identifier of the assigned taxon
# the length or score of the best match used for classification
# the taxon identifiers of all database sequences with the best match
# the accession numbers of all database sequences with the best match
# matching fragment sequence(s)
reticulate::repl_python()
table = pl.read_csv(r.file,
separator='\t',
has_header=False,
null_values=['','NA'],
new_columns = ['classified','header','taxid','score','taxid_list','acccession_list','matching_seq']).to_pandas()
quit
library(reticulate)
table1 <- table %>% arrange(taxid)
table2 <- py$table %>% arrange(taxid)
table2 <- py$table %>% arrange(header)
table1 %>% glimpse()
table2 %>% glimpse()
table
cols <- list(
"classified"=col_character(),
"header"=col_character(),
"taxid"=col_character(),
"score"=col_integer(),
"taxid_list",col_character(),
"acccession_list",col_skip(),
"matching_seq",col_character()
)
file <- "kaiju.out"
cols <- list(
"classified"=col_character(),
"header"=col_character(),
"taxid"=col_character(),
"score"=col_integer(),
"taxid_list",col_character(),
"acccession_list",col_skip(),
"matching_seq",col_character()
)
table <- read_tsv(file,col_names=names(cols),col_types=cols, na=c("", "NA"))
cols <- list(
"classified"=col_character(),
"header"=col_character(),
"taxid"=col_character(),
"score"=col_integer(),
"taxid_list",col_character(),
"acccession_list",col_skip(),
"matching_seq",col_character()
)
table <- read_tsv(file,col_names=names(cols),col_types=cols, na=c("", "NA"))
names(cols)
file <- "kaiju.out"
cols <- list(
"classified"=col_character(),
"header"=col_character(),
"taxid"=col_character(),
"score"=col_integer(),
"taxid_list",col_character(),
"acccession_list",col_skip(),
"matching_seq",col_character()
)
table <- read_tsv(file,col_names=names(cols),col_types=cols, na=c("", "NA"))
cols <- list(
"classified"=col_character(),
"header"=col_character(),
"taxid"=col_character(),
"score"=col_integer(),
"taxid_list"=col_character(),
"acccession_list",col_skip(),
"matching_seq",col_character()
)
table <- read_tsv(file,col_names=names(cols),col_types=cols, na=c("", "NA"))
cols <- list(
"classified"=col_character(),
"header"=col_character(),
"taxid"=col_character(),
"score"=col_integer(),
"taxid_list"=col_character(),
"acccession_list"=col_skip(),
"matching_seq"=col_character()
)
table <- read_tsv(file,col_names=names(cols),col_types=cols, na=c("", "NA"))
table %>% glimpse
reticulate::repl_python()
columns = [i for i,v in enumerate(cols.values()) if v is not None]
new_columns = [k for k,v in cols.items() if v is not None]
dtypes = {k:v for k,v in cols.items() if v is not None}
table = pl.read_csv(r.file,
separator='\t',
has_header=False,
null_values=['','NA'],
columns=columns,
new_columns=new_columns,
dtypes=dtypes)
cols = {
'classified'=pl.Utf8,
'header'=pl.Utf8,
'taxid'=pl.Utf8,
'score'=pl.Int32,
'taxid_list'=pl.Utf8,
'acccession_list'=None,
'matching_seq'=pl.Utf8
}
cols = {
'classified':pl.Utf8,
'header':pl.Utf8,
'taxid':pl.Utf8,
'score':pl.Int32,
'taxid_list':pl.Utf8,
'acccession_list':None,
'matching_seq':pl.Utf8
}
columns = [i for i,v in enumerate(cols.values()) if v is not None]
new_columns = [k for k,v in cols.items() if v is not None]
dtypes = {k:v for k,v in cols.items() if v is not None}
table = pl.read_csv(r.file,
separator='\t',
has_header=False,
null_values=['','NA'],
columns=columns,
new_columns=new_columns,
dtypes=dtypes)
table
tools::R_user_dir()
library(piggyback)
install.packages("piggyback")
library(piggyback)
pb_download("iris2.tsv.gz",
repo = "cboettig/piggyback-tests",
tag = "v0.0.1",
dest = tempdir())
Sys.getenv("R_HOME")
Sys.getenv("R_HOME")
Sys.getenv("R_USER")
Sys.getenv("R_ENVIRON_USER")
Sys.getenv("R_PROFILE_USER")
