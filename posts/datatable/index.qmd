---
title: Datatable notes
description: Command reference for the `datatable` package
format: html
editor: source
categories: [r]
toc: true
toc-depth: 6
toc-location: right
fontsize: small #small, medium, large, 1.2em, 12px, ...
execute:
  echo: true #whether to include code block
  eval: false #whether to run code
  warning: false #include warnings
  error: false #include errors
  output: false #include output
  # include: false #catch all for  preventing any results (code + results)
image: "thumbnail.jpg"
---






### Load package and data 

:::::::::::::: {.grid}
::: {.g-col-6}
```{r}
library(tidyverse)
diamonds
band_members
band_instruments
```
:::

::: {.g-col-6}
```{r}
library(data.table)
diamonds.dt <- as.data.table(diamonds)
band_members.dt <- as.data.table(band_members)
band_instruments.dt <- as.data.table(band_instruments)
```
:::
::::::::::::::




###### Generate a data frame from scratch

:::::::::::::: {.grid}
::: {.g-col-6}
```{r}
tibble(
  id=1:3,
  color=c("blue","red","green"),
  size=c("small","medium","large")
)
```
:::

::: {.g-col-6}
```{r}
data.table(
  id=1:3,
  color=c("blue","red","green"),
  size=c("small","medium","large")
)
```
:::
::::::::::::::




###### Read in a TSV file, explicitly

:::::::::::::: {.grid}
::: {.g-col-6}
```{r}
file <- "C:/Users/Ying/Desktop/samples/mock/Sample_GutZymo1_IGO_13699_36.kaiju_summary1.tsv"
cols <- list(
  "outfile"=col_character(), 
  "percent"=col_double(),
  "numseqs"=col_integer(),
  "taxid"=col_character(), 
  "taxon_name"=col_skip()
)
table <- read_tsv(file,
                  skip=1,
                  col_names=names(cols),
                  col_types=cols, 
                  na=c("", "NA"))
```
:::

::: {.g-col-6}
```{r}
file <- "C:/Users/Ying/Desktop/samples/mock/Sample_GutZymo1_IGO_13699_36.kaiju_summary1.tsv"
cols2 <- c(
  "outfile"="character", 
  "percent"="numeric",
  "numseqs"="numeric",
  "taxid"="character",
  "taxon_name"=NA
)
drop <- which(is.na(cols)) %>% unname()
col.names <- names(cols)[!is.na(cols)]
colClasses <- cols[!is.na(cols)] %>% {setNames(seq_along(.),.)} %>% as.list()
table2 <- fread(file,header=TRUE,
                drop=drop,
                col.names = col.names,
                colClasses=colClasses,
                na.strings=c("","NA"))
```
:::
::::::::::::::





### Row/Column Filtering

###### Extract top 3 rows

:::::::::::::: {.grid}
::: {.g-col-6}
```{r}
diamonds[1:3,] #method 1
head(diamonds,3) #method 2
diamonds %>% slice(1:3) #method 3
```
:::

::: {.g-col-6}
```{r}
diamonds.dt[1:3,] #method 1
diamonds.dt[1:3] #method 2
```
:::
::::::::::::::


###### Multiple row filter criteria

:::::::::::::: {.grid}
::: {.g-col-6}
```{r}
diamonds %>% 
  filter(clarity=="VVS1",
         price>2000,
         grepl("[DEF]",color))
```
:::

::: {.g-col-6}
```{r}
diamonds.dt[clarity=="VVS1" & 
              price>2000 & 
              grepl("[DEF]",color)]
```
:::
::::::::::::::




### Select/Rename columns


###### Routine select

:::::::::::::: {.grid}
::: {.g-col-6}
```{r}
diamonds %>% select(carat,cut,clarity)
```
:::

::: {.g-col-6}
```{r}
diamonds.dt <- diamonds %>% as.data.table()
#method 1
diamonds.dt[, c("carat","cut","clarity")] 
#method 2
diamonds.dt[, list(carat,cut,clarity)] 
#method 3
cols <- c("carat","cut","clarity") 
diamonds.dt[, ..cols]
#method 4
diamonds.dt[, .(carat,cut,clarity)] 
```
:::
::::::::::::::



###### Select columns using regex pattern

:::::::::::::: {.grid}
::: {.g-col-6}
```{r}
diamonds %>% select(matches("^c"))
```
:::

::: {.g-col-6}
```{r}
#method 1
cols <- grep("^c",  names(diamonds.dt)) 
diamonds.dt[, ..cols]
#method 2
diamonds.dt[, .SD, .SDcols=patterns("^c")] 
```
:::
::::::::::::::



###### Select columns of a certain type

:::::::::::::: {.grid}
::: {.g-col-6}
```{r}
diamonds %>% select(where(is.factor))
```
:::

::: {.g-col-6}
```{r}
diamonds.dt[, .SD, .SDcols = is.factor]
```
:::
::::::::::::::





###### Select all columns _except_ those specified

:::::::::::::: {.grid}
::: {.g-col-6}
```{r}
diamonds %>% select(-c(x,y,z))
```
:::

::: {.g-col-6}
```{r}
#method 1
diamonds.dt[, !c("x","y","z")]
#method 2
cols <- c("x","y","z") 
diamonds.dt[, -..cols]
```
:::
::::::::::::::



###### Select columns and rename

:::::::::::::: {.grid}
::: {.g-col-6}
```{r}
diamonds %>% select(price_usd=price,length=x,width=y,depth=z)
```
:::

::: {.g-col-6}
```{r}
# by reference!
setnames(diamonds.dt,
         old=c("price","x","y","z"),
         new=c("price_usd","length","width","depth"))
```
:::
::::::::::::::



###### Select all columns and add prefix

:::::::::::::: {.grid}
::: {.g-col-6}
```{r}
diamonds %>% rename_with(.fn=~paste0("var_",.))
```
:::

::: {.g-col-6}
```{r}
# by reference!
setnames(diamonds.dt,
         old=names(diamonds.dt),
         new=paste0("var_",names(diamonds.dt)))
```
:::
::::::::::::::




###### Select and programmatically rename

:::::::::::::: {.grid}
::: {.g-col-6}
```{r}
varmap <- c("price_usd"="price",
            "length"="x",
            "width"="y",
            "depth"="z")
diamonds %>% select(!!!varmap)
```
:::

::: {.g-col-6}
```{r}
# by reference!
varmap <- c("price_usd"="price",
            "length"="x",
            "width"="y",
            "depth"="z")
setnames(diamonds.dt,old=varmap,new=names(varmap))
```
:::
::::::::::::::



### Mutate/Transmute


###### Mutate

:::::::::::::: {.grid}
::: {.g-col-6}
```{r}
diamonds %>%
  mutate(price_thousands=price*1000,
         log_price=log(price),
         xyz=paste(x,y,z,sep="+"))
```
:::

::: {.g-col-6}
```{r}
# by reference!
#method 1
(diamonds.dt[, price_thousands:=price*1000]
            [, log_price:=log(price)]
            [,xyz:=paste(x,y,z,sep="+")])
#method 2
diamonds.dt[, c("price_thousands","log_price","xyz"):=.(price*1000,
                                                        log(price),
                                                        paste(x,y,z,sep="+"))]
#method 3
diamonds.dt[, ':='(price_thousands=price*1000,
                   log_price=log(price),
                   xyz=paste(x,y,z,sep="+"))]
```
:::
::::::::::::::


###### Transmute

:::::::::::::: {.grid}
::: {.g-col-6}
```{r}

diamonds %>%
  transmute(
    color_is_DEF=color %in% c("D","E","F"),
    clarity=str_to_title(clarity),
    cut.rating=if_else(cut %in% c("Ideal","Premium"),"great","ok"),
    color_status=case_when(
      color=="J" ~ "very poor",
      color %in% c("H","I") ~ "poor",
      color %in% c("F","G") ~ "ok",
      TRUE ~ "excellent"
    ))
```
:::

::: {.g-col-6}
```{r}
diamonds.dt[,.(color_is_DEF=color %in% c("D","E","F"),
               clarity=str_to_title(clarity),
               cut.rating=fifelse(cut %in% c("Ideal","Premium"),"great","ok"),
               color_status=fcase(
                 color=="J", "very poor",
                 color %in% c("H","I"), "poor",
                 color %in% c("F","G"), "ok",
                 default = "excellent"))]
```
:::
::::::::::::::





### Group By and Summarize


###### Count rows by group

:::::::::::::: {.grid}
::: {.g-col-6}
```{r}
diamonds %>% 
  group_by(cut,color) %>%
  summarize(n=n(),
            .groups="drop")

diamonds %>% count(cut,color) #shortcut
```
:::

::: {.g-col-6}
```{r}
diamonds.dt[, .(n=.N), by = c("cut","color")]
```
:::
::::::::::::::

###### Calculate various summaries by group

:::::::::::::: {.grid}
::: {.g-col-6}
```{r}
diamonds %>%
  group_by(cut) %>%
  summarize(n=n(),
            mean_price=mean(price),
            max_price=max(price),
            available_colors=paste(sort(unique(color)),collapse=", "),
            .groups="drop")
```
:::

::: {.g-col-6}
```{r}
diamonds.dt[, by=cut,
            .(n=.N,
              mean_price=mean(price),
              max_price=max(price),
              available_colors=paste(sort(unique(color)),collapse=", "))] 
```
:::
::::::::::::::


###### Select first row after sorting, by group

:::::::::::::: {.grid}
::: {.g-col-6}
```{r}
diamonds %>%
  group_by(cut) %>%
  arrange(desc(price),depth) %>%
  slice(1) %>%
  ungroup()
```
:::

::: {.g-col-6}
```{r}
(diamonds.dt[,.SD[order(-price,depth)], by=cut]
  [,.SD[1], by=cut])

diamonds.dt[,.SD[order(-price,depth)][1], by=cut]

```
:::
::::::::::::::




### Apply function across columns

###### Apply to all columns

:::::::::::::: {.grid}
::: {.g-col-6}
```{r}
diamonds %>% 
  mutate(across(.fns=~paste0(.,"_xyz")))
```
:::

::: {.g-col-6}
```{r}
diamonds.dt[,lapply(.SD, function(x) paste0(x,"_xyz"))]
```
:::
::::::::::::::




###### Apply to columns using regex

:::::::::::::: {.grid}
::: {.g-col-6}
```{r}
diamonds %>%
  transmute(across(.cols=matches("^c"),.fns=~paste0(.,"_x")))
```
:::

::: {.g-col-6}
```{r}
diamonds.dt[,lapply(.SD,function(x) paste0(x,"_x")),
            .SDcols=patterns("^c")]
```
:::
::::::::::::::



###### Apply to columns of a certain type

:::::::::::::: {.grid}
::: {.g-col-6}
```{r}
diamonds %>%
  mutate(across(.cols=where(is.numeric),
                .fns=~. * 1000))
```
:::

::: {.g-col-6}
```{r}
diamonds.dt[,lapply(.SD,function(x) {
  if (is.numeric(x)) x*1000 else x
})]
```
:::
::::::::::::::





### Joins



###### Left join

:::::::::::::: {.grid}
::: {.g-col-6}
```{r}
band_members %>% left_join(band_instruments,by="name")
```
:::

::: {.g-col-6}
```{r}
band_instruments.dt[band_members.dt, on = "name"]

merge(band_members.dt, 
      band_instruments.dt, 
      all.x = TRUE, by = "name")
```
:::
::::::::::::::



###### Inner join

:::::::::::::: {.grid}
::: {.g-col-6}
```{r}
band_members %>% inner_join(band_instruments,by="name")
```
:::

::: {.g-col-6}
```{r}
band_members.dt[band_instruments.dt, on="name",nomatch=0]

merge(band_members.dt, band_instruments.dt, by="name")
```
:::
::::::::::::::




###### Outer join

:::::::::::::: {.grid}
::: {.g-col-6}
```{r}
band_members %>% full_join(band_instruments,by="name")
```
:::

::: {.g-col-6}
```{r}
merge(band_members.dt, band_instruments.dt, all = TRUE, by = "name")
```
:::
::::::::::::::


###### Anti join

:::::::::::::: {.grid}
::: {.g-col-6}
```{r}
band_members %>% anti_join(band_instruments,by="name")
```
:::

::: {.g-col-6}
```{r}
band_members.dt[!band_instruments.dt, on ="name"]
```
:::
::::::::::::::

### Pivoting/Reshaping

###### Pivot Longer

:::::::::::::: {.grid}
::: {.g-col-6}
```{r}
diamonds %>%
  pivot_longer(cols=c(x,y,z),names_to="axis",values_to="mm")
```
:::

::: {.g-col-6}
```{r}
melt(diamonds.dt,
     measure.vars = c("x","y","z"),
     variable.name="axis",
     value.name="mm")
```
:::
::::::::::::::




###### Pivot Wider

:::::::::::::: {.grid}
::: {.g-col-6}
```{r}
diamonds %>%
  pivot_wider(id_cols=clarity,names_from=cut,values_from=price,values_fn=mean)
```
:::

::: {.g-col-6}
```{r}
dcast(diamonds.dt,
      clarity ~ cut, 
      value.var="price",fun.aggregate = mean)
```
:::
::::::::::::::



### Nested columns

###### Split string column into nested list, unnest into long format

:::::::::::::: {.grid}
::: {.g-col-6}
```{r}
diamonds %>%
  mutate(cut_word=str_split(cut," ")) %>%
  unnest(cut_word)
```
:::

::: {.g-col-6}
```{r}

# diamonds.dt <- diamonds %>% as.data.table()
# diamonds.dt[, cut_word:=str_split(cut," ")]
# ????????????????????????
# diamonds.dt[, .(cut_word=cut_word[[1]]), by=c(...)]
```
:::
::::::::::::::




###### Group by a variable and tally others in a nested field

:::::::::::::: {.grid}
::: {.g-col-6}
```{r}
diamonds %>%
  group_by(cut) %>%
  summarize(clarity_table=list(table(clarity)),
            .groups="drop")
```
:::

::: {.g-col-6}
```{r}
# ????????????????????????
```
:::
::::::::::::::




###### Move columns into single nested column, then unnest to individual columns again.

:::::::::::::: {.grid}
::: {.g-col-6}
```{r}
diamonds %>%
  nest(col_color_clarity=c(cut,color,clarity)) %>%
  unnest(col_color_clarity)
```
:::

::: {.g-col-6}
```{r}
# ????????????????????????
```
:::
::::::::::::::





###### Nested table in a single column, by group


:::::::::::::: {.grid}
::: {.g-col-6}
```{r}
diamonds %>%
  group_by(color) %>%
  nest(group_info=-color) %>%
  ungroup()
```
:::

::: {.g-col-6}
```{r}
# ????????????????????????
```
:::
::::::::::::::



### Programmatic statements



###### Inject list of expressions into a group_by/summarize


:::::::::::::: {.grid}
::: {.g-col-6}
```{r}
byvar <- c("cut","color","clarity")
cmds <- rlang::exprs(
  mean.depth = mean(depth),
  min.price = min(price),
  max.price = max(price),
  n=n()
)

diamonds %>%
  group_by(!!!syms(byvar)) %>%
  summarize(!!!cmds,
            .groups="drop")
```
:::

::: {.g-col-6}
```{r}
diamonds.dt <- diamonds %>% as.data.table()
byvar <- c("cut","color","clarity")
cmds <- rlang::exprs(
  mean.depth = mean(depth),
  min.price = min(price),
  max.price = max(price),
  n=.N
)

rlang::inject(diamonds.dt[, .(!!!cmds), by=byvar])
```
:::
::::::::::::::












