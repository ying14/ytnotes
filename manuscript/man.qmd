---
title: "Ying's Manuscript"
# format: html
format: pdf
# format: native
prefer-html: true
keep-md: true
keep-tex: true
keep-yaml: true
# format:
#   pdf:
#     classoption: [twocolumn, landscape]
#     include-in-header:
#       - packages.tex
#     documentclass: book
#     papersize: letter
#     keep-tex: true # normally erases the intermediate TEX file
# mainfont: Lato
# monofont: Roboto
fontsize: 9pt
geometry: margin=.5in
# geometry:
  # - left=1in
  # - right=1in
  # - textwidth=4.5in
  # - marginparsep=.25in
  # - marginparwidth=.25in
include-in-header:
  text: |
    %%%%%%%%%%% header fonts %%%%%%%%%%%%%%%%%%
    % https://tex.stackexchange.com/questions/40034/giving-headlines-a-background-color-spanning-across-the-entire-typearea
    \newcommand{\mysection}[1]{                  %set H1 font 
      \Large\sf\bf
      \setlength{\fboxsep}{0cm}                  %already boxed
      \colorbox{orange!80}{                      %
          \begin{minipage}{\linewidth}           %
              \vspace*{2pt}                      %Space before
              #1
              \vspace*{2pt}                     %Space after
          \end{minipage}                        
      }}   
    \setkomafont{section}{\mysection}
    %\addtokomafont{subsection}{\colorbox{lightgray}}                    %set H2 font
    \makeatletter
      \setkomafont{subsection}{\color{white}%
        \bfseries\Large
        \begin{tikzpicture}[overlay]
          \draw[fill=blue] (0,-2pt) rectangle
          (\linewidth,16.4pt);
        \end{tikzpicture}}    
    %\newfontfamily\subsubsectionfont{Arial}[Color=Black]    %define H3 font
    %\addtokomafont{subsubsection}{\subsubsectionfont}
    \newfontfamily\paragraphfont{Arial}[Color=2052b0]          %define H4 font
    \addtokomafont{paragraph}{\paragraphfont}
    \addtokomafont{subparagraph}{\colorbox{lightgray}}    %define H5 font
    %%%%%%%%%%% figure/table margins %%%%%%%%%%%%%%%%%%
    \setlength{\intextsep}{0pt}                            %set wrapfig margin above/below
    \setlength{\columnsep}{0pt}                            %set wrapfig margin
    \setlength{\abovecaptionskip}{0pt}                    % spacing above caption, default 10pt
    \setlength{\belowcaptionskip}{0pt}                     % spacing below caption, default 0pt
    %%%%%%%%%%%% caption settings %%%%%%%%%%%%%%%%%%%%%
    % caption size: scriptsize|footnotesize|small|normalsize|large|Large
    \definecolor{captioncolor}{HTML}{37658c}
    %\usepackage[labelfont={bf},font={footnotesize,color=captioncolor},justification=RaggedRight]{caption}  
    \usepackage[labelfont={bf},font={footnotesize,color=captioncolor},justification=raggedright,format=plain]{caption}  
    %%%%%%%%%%%% hyperref settings %%%%%%%%%%%%%%%%%%%%%
    \usepackage[draft]{hyperref}                         % turns off all hyperlinks  
editor: source
# latex-tinytex: false
execute: 
  echo: false
  warning: false
# number-sections: true     #turn this on for section referencing
bibliography: references.bib
csl: nature.csl
fig-cap-location: bottom # this is default
tbl-cap-location: bottom # normally on top
header-includes:
   - \usepackage{lineno}     #line numbers, only works for latex
   - \linenumbers            #line numbers
   - \usepackage{wrapfig}    #to be able to wrap text around figures
   - \usepackage{graphicx}
# fontfamily: libertinus  #font changing (latex only)
# fontfamilyoptions:
#   - osf
#   - p
filters:
  - pandoc-wrapfig-mod.py      # https://github.com/scotthartley/pandoc-wrapfig
#   - spellcheck.lua
# cap-location: top
---

```{r}
library(knitr)
library(kableExtra)
# xx <- knitr::knit_hooks$get("document")

# source: processing the source code.
# output: processing text output.
# warning: processing warnings (usually from warning()).
# message: processing messages (usually from message()).
# error: processing error messages (usually from stop()).
# plot: processing plot file paths.
# inline: processing output from inline R expressions.
# chunk: processing output from the whole chunk.
# document: processing the whole document.

knit_hooks$set(wrapf = function(before, options, envir) {
  if(before) {
    return("\\begin{wrapfigure}{R}{0.3\\textwidth}")
  } else {

    output <- vector(mode = "character", length = options$fig.num + 1)

    for (i in 1:options$fig.num) {
      output[i] <- sprintf("\\includegraphics{%s}", fig_path(number = i))
    }

    output[i+1] <- "\\end{wrapfigure}"
    final <- paste(output, collapse = "\n\n")
    return(final)
  }
})


defOut <- knitr::knit_hooks$get("plot")  # save the default plot hook
knitr::knit_hooks$set(plot = function(x, options) {  # set new plot hook ...

  x <- defOut(x, options)  # first apply the default hook
  # for example:
  # x = "man_files/figure-pdf/fig-mtcars-wrapfig-1.pdf"
  # becomes pandoc ...
  # x = "::: {.cell-output-display}\n![](man_files/figure-pdf/fig-mtcars-wrapfig-1.pdf){#fig-mtcars-wrapfigD08295A6-16DC-499D-85A8-8BA656E013A2}\n:::\n\n"
  # later, to tex:
  # \begin{figure}
  #   {\centering \includegraphics{man_files/figure-pdf/fig-mtcars-wrapfig-1.pdf}
  #   }
  #   \caption{\label{fig-mtcars-wrapfig}\textbf{?(caption)}}
  # \end{figure}

  if(!is.null(options$wrapfigure)) {  # then, if option wrapfigure is given ...
    # # create the new opening string for the wrapfigure environment ...
    wf <- sprintf("\\begin{wrapfigure}{%s}{%g\\textwidth}", options$wrapfigure[[1]], options$wrapfigure[[2]])
    x  <- gsub("\\begin{figure}", wf, x, fixed = T)  # and replace the default one with it.
    x  <- gsub("{figure}", "{wrapfigure}", x, fixed = T)  # also replace the environment ending
  }
  return(x)
})
```

```{r}
library(tidyverse)
library(yingtools2)
```


# Header 1
## Header 2
### Header 3
#### Header 4
##### Header 5
###### Header 6


## Introduction {#sec-introduction}

When you click the **Render** button a document will be generated that includes both content and the output of embedded code. You can embed code like this. The `echo: false` option disables the printing of code (only output is displayed).

Here is a footnote reference,[^1] and another.[^2] You can also reference inline![^3]

[^1]: Here is the footnote.

[^2]: Here's one with multiple blocks. Subsequent paragraphs are indented to show that they belong to the previous footnote.

        { some.code }

[^3]: Hello. I am an inline footnote.

<!-- These footnote definitions can go anywhere make sure there is blank line before/after -->

The whole paragraph can be indented, or just the first line. In this way, multi-paragraph footnotes work like multi-paragraph list items.

Here is a sentence with citation using bibliography. [@cordonnier2009randomized]

The sentence has multiple references. [@adibi2012reduction; @gold2008human; @roach1991ciprofloxacin]

Black-Scholes (@eq-black-scholes) is a mathematical model that seeks to explain the behavior of financial derivatives, most commonly options:

$$
\frac{\partial \mathrm C}{ \partial \mathrm t } + \frac{1}{2}\sigma^{2} \mathrm S^{2}
\frac{\partial^{2} \mathrm C}{\partial \mathrm C^2}
  + \mathrm r \mathrm S \frac{\partial \mathrm C}{\partial \mathrm S}\ =
  \mathrm r \mathrm C 
$$ {#eq-black-scholes}

The box was thrown beside the parked truck. The hogs were fed chopped corn and garbage. Four hours of steady work faced us. Large size in stockings is hard to sell. Check out @sec-introduction for additional content. The boy was there when the sun rose. ![](stamp1a.jpg){height="1em"} A rod is used to catch pink salmon. The source of the huge river is the clear spring. Kick the ball straight and follow through. Help the woman get back to her feet. A pot of tea helps to pass the evening. 


{{< pagebreak >}}

## Bitamp figure

`r paste(stringi::stri_rand_lipsum(1, start_lipsum = FALSE), collapse = "\n\n")`
See @fig-stamp1a to see the stamp I'm talking about.

![Single bitmap](stamp1a.jpg){#fig-stamp1a}

`r paste(stringi::stri_rand_lipsum(1, start_lipsum = FALSE), collapse = "\n\n")`


Now look at @fig-combined, and notice how @fig-stamp1b and @fig-stamp1-again differ.

::: {#fig-combined layout-ncol="2"}
![stamp B](stamp1b.jpg){#fig-stamp1b}

![stamp A again](stamp1a.jpg){#fig-stamp1-again}

Combined stamps. Show again are several stamps. @fig-stamp1b shows in blue, and @fig-stamp1-again in red.
:::

`r paste(stringi::stri_rand_lipsum(1, start_lipsum = FALSE), collapse = "\n\n")`


{{< pagebreak >}}

`r paste(stringi::stri_rand_lipsum(1, start_lipsum = FALSE), collapse = "\n\n")`
See @fig-diamonds.

```{r}
#| label: fig-diamonds
#| fig-cap: Plot of Diamonds
#| out-width: 50%
####| out-extra: style=float:right   #this isn't working
ggplot(diamonds,aes(x=carat,y=price,color=cut)) + geom_point()
```

`r paste(stringi::stri_rand_lipsum(1, start_lipsum = FALSE), collapse = "\n\n")`
See @tbl-mtcars.

```{r}
#| label: tbl-mtcars
#| tbl-cap: Table of Mtcars
knitr::kable(mtcars[1:7,1:9])
```

`r paste(stringi::stri_rand_lipsum(1, start_lipsum = FALSE), collapse = "\n\n")`


{{< pagebreak >}}

`r paste(stringi::stri_rand_lipsum(1, start_lipsum = FALSE), collapse = "\n\n")`
See @fig-diamonds2.

```{r}
#| label: fig-diamonds2
#| fig-cap: Plot of Diamonds
#| fig-align: left
#| out-width: 100%
#| fig-width: 15
#| fig-height: 7
#| fig-pos: 't'
# | out-extra: style=float:right   #this isn't working
ggplot(diamonds,aes(x=carat,y=price,color=cut)) + geom_point()
```

`r paste(stringi::stri_rand_lipsum(2, start_lipsum = FALSE), collapse = "\n\n")`
See @tbl-mtcars2.

```{r}
#| label: tbl-mtcars2
#| tbl-cap: Table of Mtcars
# knitr::kable(mtcars[1:10,1:9], "latex", booktabs = T) %>%
#   kableExtra::kable_styling(latex_options = "scale_down")

knitr::kable(mtcars[1:10,1:9]) %>% kableExtra::kable_styling(font_size = 7)

# knitr::kable(mtcars[1:10,1:9])

```













{{< pagebreak >}}

## Wrapfig: bitmap via manual-TEX

<!-- 1. cross-refs have to be done at TEX level -->
<!-- 2. specifying 0 will automatically fit based on the image's size -->

`r paste(stringi::stri_rand_lipsum(2, start_lipsum = FALSE), collapse = "\n\n")`
You can see a wrapped text thing at Figure \ref{fig-wrap}.

```{=tex}
% \begin{wrapfigure}[lineheight]{position}{width}
% \begin{wrapfigure}{0}{0.4\linewidth}{0.5\textwidth}

\begin{wrapfigure}{r}{0.4\textwidth}
  \centering
  \includegraphics[width=0.35\textwidth]{stamp1b.jpg}
  \caption{\label{fig-wrap}caption here. A cup of sugar makes sweet fudge. Place a rosebush near the porch steps.}
  \vspace{-3pt}
\end{wrapfigure}
```
`r paste(stringi::stri_rand_lipsum(3, start_lipsum = FALSE), collapse = "\n\n")`
You can see a wrapped text thing at Figure \ref{fig-wrap2}.

```{=tex}
\begin{wrapfigure}{l}{0\textwidth}
  \centering
  \includegraphics[width=0.3\textwidth,height=0.3\textwidth]{stamp1a.jpg}
  \caption{\label{fig-wrap2}caption here. A cup of sugar makes sweet fudge. Place a rosebush near the porch steps.}
  \vspace{-6pt}
\end{wrapfigure}
```
`r paste(stringi::stri_rand_lipsum(4, start_lipsum = FALSE), collapse = "\n\n")`
















{{< pagebreak >}}

## Wrapfig: bitmap via pandoc-filter

<!-- 1. cross-refs have to be done at TEX level -->
<!-- 2. Unclear how to stretch figure to fit;  -->
<!-- 3. width needs to be expressed in in/cm/pt -->

`r paste(stringi::stri_rand_lipsum(2, start_lipsum = FALSE), collapse = "\n\n")`
You can see a wrapped text thing at Figure \ref{fig-wrap-filter}.
 
![\label{fig-wrap-filter} A cup of sugar makes sweet fudge. Place a rosebush near the porch steps. {r3in}](stamp1b.jpg){#fig-wrap-filter}



`r paste(stringi::stri_rand_lipsum(3, start_lipsum = FALSE), collapse = "\n\n")`
You can see a wrapped text thing at Figure \ref{fig-wrap-filter2}
You can see a wrapped text thing at @fig-wrap-filter2
<!-- Figure \ref{fig-wrap-filter2}. -->

<!-- ::: {#fig-wrap-filter2} -->
<!-- ![](stamp1a.jpg) -->

<!-- A cup of sugar makes sweet fudge. Place a rosebush near the porch steps.{l3in,18} -->
<!-- ::: -->

```{r}
#| output: asis

show_wrapfig <- function(file,title,crossref,width="4in",position="l") {
  fig_wrap_filter2 <- str_glue("
\\begin{{wrapfigure}}{{{position}}}{{0\\textwidth}}
  \\centering
  \\includegraphics[width={width},height=0.3\\textwidth]{{{file}}}
  \\caption{{\\label{{{crossref}}}{title}}}
  \\vspace{{-6pt}}
\\end{{wrapfigure}}
")
  cat(fig_wrap_filter2)
}

show_wrapfig("stamp1a.jpg",title="TITLE HERE",crossref="fig-wrap-filter2",width="4in",position="l")

# title <- "TITLE HERE"
# label <- "fig-wrap-filter2"
# file <- "stamp1a.jpg"
# width <- "3in"
# position <- "l"
# fig_wrap_filter2 <- str_glue("
# \\begin{{wrapfigure}}{{{position}}}{{0\\textwidth}}
#   \\centering
#   \\includegraphics[width={width},height=0.3\\textwidth]{{{file}}}
#   \\caption{{\\label{{{label}}}{title}}}
#   \\vspace{{-6pt}}
# \\end{{wrapfigure}}
# ")
# cat(fig_wrap_filter2)
```



<!-- ![\label{fig-wrap-filter2} A cup of sugar makes sweet fudge. Place a rosebush near the porch steps. {l3in,18}](stamp1a.jpg) -->

`r paste(stringi::stri_rand_lipsum(4, start_lipsum = FALSE), collapse = "\n\n")`












{{< pagebreak >}}

## Wrapfig: ggplot-pdf via manual TEX

<!-- 1. cross-refs have to be done at TEX level -->
<!-- 2. play around with pdf size and wrapfig size to get it right -->


```{r}
#| echo: false

# make a pdf
g <- ggplot(mtcars,aes(x=mpg,y=hp,color=factor(cyl),size=disp)) + geom_point(alpha=0.75)
ggsave(file="mtcars.pdf", plot=g, width=10, height=8)
```

```{=tex}
\begin{wrapfigure}{r}{0.4\textwidth}
  \centering
  \includegraphics{mtcars.pdf}
  \caption{\label{fig-mtcars-wrapfig-0}Create ggplot pdf, then add as TEX.}
\end{wrapfigure}
```

<!-- \begin{wrapfigure}{l}{0\textwidth} -->

`r paste(stringi::stri_rand_lipsum(2, start_lipsum = FALSE), collapse = "\n\n")`
See Figure \ref{fig-mtcars-wrapfig-0}.

`r paste(stringi::stri_rand_lipsum(2, start_lipsum = FALSE), collapse = "\n\n")`


















{{< pagebreak >}}

## Wrapfig: ggplot2-pdf via pandoc-filter

<!-- 1. cross-refs have to be done at TEX level -->
<!-- 2. play around with pdf size and wrapfig size to get it right -->

![\label{fig-mtcars-wrapfig-1.5} figure here{r3in,18}](mtcars.pdf)

`r paste(stringi::stri_rand_lipsum(2, start_lipsum = FALSE), collapse = "\n\n")`
See Figure \ref{fig-mtcars-wrapfig-1.5}.

`r paste(stringi::stri_rand_lipsum(2, start_lipsum = FALSE), collapse = "\n\n")`
















{{< pagebreak >}}

## Wrapfig: inline-ggplot via wrapf-hook 

<!-- 1. cross-ref and fig-captions don't work! -->

`r paste(stringi::stri_rand_lipsum(2, start_lipsum = FALSE), collapse = "\n\n")`

```{r wrapf = TRUE, fig.show='hide'}
#| label: fig-mtcars-wrapfig
#| fig-cap: Wrapfig ggplot mtcars test
ggplot(mtcars,aes(x=mpg,y=hp,color=factor(cyl),size=disp)) + geom_point()
```

`r paste(stringi::stri_rand_lipsum(5, start_lipsum = FALSE), collapse = "\n\n")`











{{< pagebreak >}}

## Wrapfig: inline-ggplot via wrapfigure-hook

<!-- 1. this isn't working right now -->

```{r wrapfigure = list("r", .3)}
ggplot(mtcars,aes(x=mpg,y=hp)) + geom_point()
```























{{< pagebreak >}}

## Wrap table

<!-- 1. caption and cross-ref doesn't work -->

`r paste(stringi::stri_rand_lipsum(3, start_lipsum = FALSE), collapse = "\n\n")`
See @kable-float.




```{r}
#| label: kable-float

# [THIS LINE MAKES IT BREAK]tbl-cap: Kable Float
dt <- mtcars[1:5, 1:6]
kbl(dt, 
    booktabs = TRUE) %>% kable_styling(position = "float_right",
                                        latex_options="striped",
                                        # wraptable_width="0.4\\textwidth",
                                        font_size=7) %>%
  add_footnote("footnote")
```



`r paste(stringi::stri_rand_lipsum(4, start_lipsum = FALSE), collapse = "\n\n")`


<!-- See Table \ref{tbl-mtsmall}. -->

<!-- ```{=tex} -->
<!-- \begin{wrapfigure}{l}{0.4\linewidth} -->
<!--   \centering -->
<!-- ```{r} -->
<!-- library(xtable) -->
<!-- print(xtable(head(iris[,c(1,2)])), floating = FALSE) -->
<!-- ``` -->
<!--   \caption{\label{tbl-mtsmall}caption here. A cup of sugar makes sweet fudge. Place a rosebush near the porch steps.} -->
<!--   \vspace{-3pt} -->
<!-- \end{wrapfigure} -->
<!-- ``` -->

{{< pagebreak >}}






## Wrap table manual

<!-- 1. caption and cross-ref doesn't work -->


```{=tex}

\begin{wraptable}{r}{5.5cm}
  \caption{A wrapped table going nicely inside the text.}\label{tbl-wrap}
  \begin{tabular}{ccc}\\\toprule  
  Header-1 & Header-1 & Header-1 \\\midrule
  2 &3 & 5\\  \midrule
  2 &3 & 5\\  \midrule
  2 &3 & 5\\  \bottomrule
  \end{tabular}
\end{wraptable} 

```

`r paste(stringi::stri_rand_lipsum(3, start_lipsum = FALSE), collapse = "\n\n")`
See Table \ref{tbl-wrap}.




{{< pagebreak >}}





## Wrap table 2



```{r}
#| output: asis

show_wraptable <- function(table,caption,label,width="4in",height=NULL,position="r",font_size=7, footnote=NULL) {
  latex <- kable(table,
            booktabs = TRUE,
            format="latex",label=label,
            caption=caption) %>%
    kable_styling(position = "float_right",
                  latex_options="striped",
                  wraptable_width=width,
                  font_size=font_size) %>% 
    add_footnote(footnote,notation="none") %>% 
    as.character()
  if (!is.null(height)) {
    #if height is speficied, add it to wraptable line
    latex <- sub("(\\{wraptable\\})",str_glue("\\1[{height}]"),latex)
  }
  
  latex <- latex %>% str_replace(middle.pattern("\\\\begin\\{wraptable\\}\\{","r","\\}"),position)

  # kable always wants to add "tab:" to the front of the crossref. 
  latex <- latex %>% str_replace(fixed("tab:"),"")
  cat(latex)
}
dt <- mtcars[1:5, 1:6]
show_wraptable(dt,caption="here is the table",label="tbl-wrap2",width="5in",height="20")
```


`r paste(stringi::stri_rand_lipsum(3, start_lipsum = FALSE), collapse = "\n\n")`
See Table \ref{tbl-wrap2}.
<!-- See @tbl-wrap2. -->

{{< pagebreak >}}





<!-- does not work for pdf -->

::: columns
::: {.column width="50%"}
left column
:::

::: {.column width="50%"}
right column
:::
:::

### References

<!-- Bibliography will go here (it this isn't included, it will follow CSL format) -->

::: {#refs}
:::

Acknowledgements: asdf
