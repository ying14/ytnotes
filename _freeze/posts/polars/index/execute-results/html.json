{
  "hash": "a99663d8cf41e9437c1641228bfaf4f8",
  "result": {
    "markdown": "---\ntitle: Polars notes\ndescription: Command reference for the `polars` Python package, with R equivalents\nformat: html\neditor: source\ncategories: [r, python]\ntoc: true\ntoc-depth: 6\ntoc-location: right\nfontsize: small #small, medium, large, 1.2em, 12px, ...\nexecute:\n  echo: true #whether to include code block\n  eval: false #whether to run code\n  warning: false #include warnings\n  error: false #include errors\n  output: false #include output\n  # include: false #catch all for  preventing any results (code + results)\nimage: \"thumbnail.jpg\"\n---\n\n\n\n\n\n### Load package and data \n\n:::::::::::::: {.grid}\n::: {.g-col-6}\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\ndiamonds\nband_members\nband_instruments\n```\n:::\n\n:::\n\n::: {.g-col-6}\n\n::: {.cell}\n\n```{.python .cell-code}\nimport polars as pl\ndiamonds_polars = pl.from_pandas(r.diamonds)\nband_members_polars = pl.from_pandas(r.band_members)\nband_instruments_polars = pl.from_pandas(r.band_instruments)\n```\n:::\n\n:::\n::::::::::::::\n\n\n###### Generate a data frame from scratch\n\n:::::::::::::: {.grid}\n::: {.g-col-6}\n\n::: {.cell}\n\n```{.r .cell-code}\ntibble(\n  id=1:3,\n  color=c(\"blue\",\"red\",\"green\"),\n  size=c(\"small\",\"medium\",\"large\")\n)\n```\n:::\n\n:::\n\n::: {.g-col-6}\n\n::: {.cell}\n\n```{.python .cell-code}\npl.DataFrame(\n  {\n    'id': [1, 2, 3],\n    'color': ['blue', 'red', 'green'],\n    'size': ['small', 'medium', 'large']\n  }\n).to_pandas()\n```\n:::\n\n:::\n::::::::::::::\n\n\n\n\n###### Extract vector\n\n:::::::::::::: {.grid}\n::: {.g-col-6}\n\n::: {.cell}\n\n```{.r .cell-code}\ndiamonds$color #method 1\ndiamonds[[\"color\"]] #method 2\ndiamonds %>% pull(color) #method 3\n```\n:::\n\n:::\n\n::: {.g-col-6}\n\n::: {.cell}\n\n```{.python .cell-code}\ndiamonds_polars['color'] #method 1\ndiamonds_polars.get_column('color') #method 2\n```\n:::\n\n:::\n::::::::::::::\n\n\n### Read in Files\n\n###### Read in a TSV file (with header)\n\n:::::::::::::: {.grid}\n::: {.g-col-6}\n\n::: {.cell}\n\n```{.r .cell-code}\nfile <- \"kaiju_summary.tsv\"\ntable <- read_tsv(file,na=c(\"\",\"NA\"))\n```\n:::\n\n:::\n\n::: {.g-col-6}\n\n::: {.cell}\n\n```{.python .cell-code}\ntable = pl.read_csv(r.file, \n                    separator='\\t', \n                    null_values=['','NA']).to_pandas()\n```\n:::\n\n:::\n::::::::::::::\n\n###### Read in a TSV file (without header)\n\n:::::::::::::: {.grid}\n::: {.g-col-6}\n\n::: {.cell}\n\n```{.r .cell-code}\nfile <- \"kaiju.out\"\ntable <- read_tsv(file,col_names=c(\"classified\",\"header\",\"taxid\",\"score\",\"taxid_list\",\"acccession_list\",\"matching_seq\"))\n```\n:::\n\n:::\n\n::: {.g-col-6}\n\n::: {.cell}\n\n```{.python .cell-code}\ntable = pl.read_csv(r.file, \n                    separator='\\t', \n                    has_header=False, \n                    null_values=['','NA'],\n                    new_columns = ['classified','header','taxid','score','taxid_list','acccession_list','matching_seq']).to_pandas()\n```\n:::\n\n:::\n::::::::::::::\n\n\n###### Read in a TSV file (without header, explicitly specify columns)\n\n:::::::::::::: {.grid}\n::: {.g-col-6}\n\n::: {.cell}\n\n```{.r .cell-code}\nfile <- \"kaiju.out\"\ncols <- list(\n  \"classified\"=col_character(),\n  \"header\"=col_character(),\n  \"taxid\"=col_character(),\n  \"score\"=col_integer(),\n  \"taxid_list\"=col_character(),\n  \"acccession_list\"=col_skip(),\n  \"matching_seq\"=col_character()\n)\ntable <- read_tsv(file,col_names=names(cols),col_types=cols, na=c(\"\", \"NA\"))\n```\n:::\n\n:::\n\n::: {.g-col-6}\n\n::: {.cell}\n\n```{.python .cell-code}\ncols = {\n  'classified':pl.Utf8,\n  'header':pl.Utf8,\n  'taxid':pl.Utf8,\n  'score':pl.Int32,\n  'taxid_list':pl.Utf8,\n  'acccession_list':None,\n  'matching_seq':pl.Utf8\n}\n\ncolumns = [i for i,v in enumerate(cols.values()) if v is not None]\nnew_columns = [k for k,v in cols.items() if v is not None]\ndtypes = {k:v for k,v in cols.items() if v is not None}\ntable = pl.read_csv(r.file, \n                    separator='\\t', \n                    has_header=False, \n                    null_values=['','NA'], \n                    columns=columns, \n                    new_columns=new_columns, \n                    dtypes=dtypes).to_pandas()\n```\n:::\n\n:::\n::::::::::::::\n\n\n###### Read in a TSV file (explicitly without header)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(reticulate)\ntable1 <- table %>% arrange(header)\ntable2 <- py$table %>% arrange(header)\ntable1 %>% glimpse()\ntable2 %>% glimpse()\n\n\ntable2$taxid_list\n```\n:::\n\n\n\n### Table Characteristics\n\n:::\n\n::: {.g-col-6}\n\n::: {.cell}\n\n```{.python .cell-code}\ndiamonds_polars.height #height\ndiamonds_polars.width #width\ndiamonds_polars.shape #height and width (tuple)\ndiamonds_polars.columns #column names (list)\ndiamonds_polars.dtypes #datatypes (list)\ndiamonds_polars.schema #column datatypes (dict)\n```\n:::\n\n:::\n::::::::::::::\n\n\n\n### Row/Column Filtering\n\n###### Extract top 3 rows\n\n:::::::::::::: {.grid}\n::: {.g-col-6}\n\n::: {.cell}\n\n```{.r .cell-code}\ndiamonds[1:3,] #method 1\nhead(diamonds,3) #method 2\ndiamonds %>% slice(1:3) #method 3\n```\n:::\n\n:::\n\n::: {.g-col-6}\n\n::: {.cell}\n\n```{.python .cell-code}\ndiamonds_polars[[1,2,3],:].to_pandas()\ndiamonds_polars.head(3).to_pandas()\n```\n:::\n\n:::\n::::::::::::::\n\n\n###### Multiple row filter criteria\n\n:::::::::::::: {.grid}\n::: {.g-col-6}\n\n::: {.cell}\n\n```{.r .cell-code}\ndiamonds %>% \n  filter(clarity==\"VVS1\",\n         price>2000,\n         grepl(\"[DEF]\",color))\n```\n:::\n\n:::\n\n::: {.g-col-6}\n\n::: {.cell}\n\n```{.python .cell-code}\n(diamonds_polars\n  .filter(\n    (pl.col('clarity')=='VVS1') &\n    (pl.col('price') > 2000) & \n    (pl.col('color').cast(pl.Utf8).str.contains('[DEF]'))\n  )\n).to_pandas()\n```\n:::\n\n:::\n::::::::::::::\n\n\n\n\n\n\n\n\n\n### Select/Rename columns\n\n\n###### Routine select\n\n:::::::::::::: {.grid}\n::: {.g-col-6}\n\n::: {.cell}\n\n```{.r .cell-code}\ndiamonds %>% select(carat,cut,clarity)\n```\n:::\n\n:::\n\n::: {.g-col-6}\n\n::: {.cell}\n\n```{.python .cell-code}\n(diamonds_polars\n  .select(['carat','cut','clarity'])\n).to_pandas()\n```\n:::\n\n:::\n::::::::::::::\n\n\n\n###### Select columns using regex pattern\n\n:::::::::::::: {.grid}\n::: {.g-col-6}\n\n::: {.cell}\n\n```{.r .cell-code}\ndiamonds %>% select(matches(\"^c\"))\n```\n:::\n\n:::\n\n::: {.g-col-6}\n\n::: {.cell}\n\n```{.python .cell-code}\n(diamonds_polars\n  .select([\n    pl.col('^c.*$')  \n  ])\n).to_pandas()\n```\n:::\n\n:::\n::::::::::::::\n\n\n\n###### Select columns of a certain type\n\n:::::::::::::: {.grid}\n::: {.g-col-6}\n\n::: {.cell}\n\n```{.r .cell-code}\ndiamonds %>% select(where(is.factor))\n```\n:::\n\n:::\n\n::: {.g-col-6}\n\n::: {.cell}\n\n```{.python .cell-code}\n(diamonds_polars\n  .select([\n    pl.col(pl.Categorical)  \n  ])\n).to_pandas()\n```\n:::\n\n:::\n::::::::::::::\n\n\n\n\n\n###### Select all columns _except_ those specified\n\n:::::::::::::: {.grid}\n::: {.g-col-6}\n\n::: {.cell}\n\n```{.r .cell-code}\ndiamonds %>% select(-c(x,y,z))\n```\n:::\n\n:::\n\n::: {.g-col-6}\n\n::: {.cell}\n\n```{.python .cell-code}\n(diamonds_polars\n  .select([\n    pl.all().exclude(['x','y','z'])\n  ])\n).to_pandas()\n```\n:::\n\n:::\n::::::::::::::\n\n\n\n###### Select columns and rename\n\n:::::::::::::: {.grid}\n::: {.g-col-6}\n\n::: {.cell}\n\n```{.r .cell-code}\ndiamonds %>% select(price_usd=price,length=x,width=y,depth=z)\n```\n:::\n\n:::\n\n::: {.g-col-6}\n\n::: {.cell}\n\n```{.python .cell-code}\n(diamonds_polars\n  .select([\n    pl.col('price').alias('price_usd'),\n    pl.col('x').alias('length'),\n    pl.col('y').alias('width'),\n    pl.col('z').alias('depth')\n  ])\n).to_pandas()\n```\n:::\n\n:::\n::::::::::::::\n\n\n\n###### Select all columns and add prefix\n\n:::::::::::::: {.grid}\n::: {.g-col-6}\n\n::: {.cell}\n\n```{.r .cell-code}\ndiamonds %>% rename_with(.fn=~paste0(\"var_\",.))\n```\n:::\n\n:::\n\n::: {.g-col-6}\n\n::: {.cell}\n\n```{.python .cell-code}\n(diamonds_polars\n  .select([\n    pl.all().prefix('var_')\n  ])\n).to_pandas()\n```\n:::\n\n:::\n::::::::::::::\n\n\n\n\n###### Select and programmatically rename\n\n:::::::::::::: {.grid}\n::: {.g-col-6}\n\n::: {.cell}\n\n```{.r .cell-code}\nvarmap <- c(\"price_usd\"=\"price\",\n            \"length\"=\"x\",\n            \"width\"=\"y\",\n            \"depth\"=\"z\")\ndiamonds %>% select(!!!varmap)\n```\n:::\n\n:::\n\n::: {.g-col-6}\n\n::: {.cell}\n\n```{.python .cell-code}\nvarmap = {'price':'price_usd',\n          'x':'length',\n          'y':'width',\n          'z':'depth'}\n(diamonds_polars\n  .select(varmap)\n  .rename(varmap)\n).to_pandas()\n```\n:::\n\n:::\n::::::::::::::\n\n\n\n### Mutate/Transmute\n\n\n###### Mutate\n\n:::::::::::::: {.grid}\n::: {.g-col-6}\n\n::: {.cell}\n\n```{.r .cell-code}\ndiamonds %>%\n  mutate(price_thousands=price*1000,\n         log_price=log(price),\n         xyz=paste(x,y,z,sep=\"+\"))\n```\n:::\n\n:::\n\n::: {.g-col-6}\n\n::: {.cell}\n\n```{.python .cell-code}\n(diamonds_polars\n  .with_columns([\n    (pl.col('price')*1000).alias('price_thousands'),\n    pl.col('price').log().alias('log_price'),\n    pl.concat_str([pl.col('x'),pl.col('y'),pl.col('z')],sep='+').alias('xyz')\n  ])\n).to_pandas()\n```\n:::\n\n:::\n::::::::::::::\n\n\n###### Transmute\n\n:::::::::::::: {.grid}\n::: {.g-col-6}\n\n::: {.cell}\n\n```{.r .cell-code}\ndiamonds %>%\n  transmute(\n    color_is_DEF=color %in% c(\"D\",\"E\",\"F\"),\n    color_status=case_when(\n      color==\"J\" ~ \"very poor\",\n      color %in% c(\"H\",\"I\") ~ \"poor\",\n      color %in% c(\"F\",\"G\") ~ \"ok\",\n      TRUE ~ \"excellent\"\n    ),\n    clarity=str_to_title(clarity))\n```\n:::\n\n:::\n\n::: {.g-col-6}\n\n::: {.cell}\n\n```{.python .cell-code}\n(diamonds_polars\n  .select([\n    pl.col('color').cast(pl.Utf8).is_in(['D','E','F']).alias('color_is_DEF'),\n    pl.when(pl.col('color')=='J').then('very poor')\n      .when(pl.col('color').cast(pl.Utf8).is_in(['H','I'])).then('poor')\n      .when(pl.col('color').cast(pl.Utf8).is_in(['F','G'])).then('ok')\n      .otherwise('excellent')\n      .alias('color_status'),\n    pl.col('clarity').apply(lambda s: s.title())\n  ])\n).to_pandas()\n```\n:::\n\n:::\n::::::::::::::\n\n\n\n\n\n### Group By and Summarize\n\n\n###### Count rows by group\n\n:::::::::::::: {.grid}\n::: {.g-col-6}\n\n::: {.cell}\n\n```{.r .cell-code}\ndiamonds %>% \n  group_by(cut,color) %>%\n  summarize(n=n(),\n            .groups=\"drop\")\n\ndiamonds %>% count(cut,color) #shortcut\n```\n:::\n\n:::\n\n::: {.g-col-6}\n\n::: {.cell}\n\n```{.python .cell-code}\n(diamonds_polars\n  .groupby(['cut','color'])\n  .agg([\n    pl.count().alias('n')\n  ])\n).to_pandas()\n```\n:::\n\n:::\n::::::::::::::\n\n###### Calculate various summaries by group\n\n:::::::::::::: {.grid}\n::: {.g-col-6}\n\n::: {.cell}\n\n```{.r .cell-code}\ndiamonds %>%\n  group_by(cut) %>%\n  summarize(n=n(),\n            mean_price=mean(price),\n            max_price=max(price),\n            available_colors=paste(sort(unique(color)),collapse=\", \"),\n            .groups=\"drop\")\n```\n:::\n\n:::\n\n::: {.g-col-6}\n\n::: {.cell}\n\n```{.python .cell-code}\n(diamonds_polars\n  .groupby('cut')\n  .agg([\n    pl.count().alias('n'),\n    pl.col('price').mean().alias('mean_price'),\n    pl.col('price').max().alias('max_price'),\n    pl.col('color').unique().cast(pl.Utf8).sort().str.concat(', ').alias('availble_colors')\n  ])\n).to_pandas()\n```\n:::\n\n:::\n::::::::::::::\n\n\n###### Select first row after sorting, by group\n\n:::::::::::::: {.grid}\n::: {.g-col-6}\n\n::: {.cell}\n\n```{.r .cell-code}\ndiamonds %>%\n  group_by(cut) %>%\n  arrange(desc(price),depth) %>%\n  slice(1) %>%\n  ungroup()\n```\n:::\n\n:::\n\n::: {.g-col-6}\n\n::: {.cell}\n\n```{.python .cell-code}\n(diamonds_polars\n  .sort(['price','depth'],reverse=[True,False])\n  .groupby('cut')\n  .head(1)\n).to_pandas()\n```\n:::\n\n:::\n::::::::::::::\n\n\n\n\n\n\n\n\n\n\n\n\n### Apply function across columns\n\n###### Apply to all columns\n\n:::::::::::::: {.grid}\n::: {.g-col-6}\n\n::: {.cell}\n\n```{.r .cell-code}\ndiamonds %>% \n  mutate(across(.fns=~paste0(.,\"_xyz\")))\n```\n:::\n\n:::\n\n::: {.g-col-6}\n\n::: {.cell}\n\n```{.python .cell-code}\n(diamonds_polars\n  .with_columns([\n    pl.all()+'_xyz'\n  ])\n).to_pandas()\n```\n:::\n\n:::\n::::::::::::::\n\n\n\n\n###### Apply to columns using regex\n\n:::::::::::::: {.grid}\n::: {.g-col-6}\n\n::: {.cell}\n\n```{.r .cell-code}\ndiamonds %>% \n  transmute(across(.cols=matches(\"^c\"),.fns=~paste0(.,\"_x\")))\n```\n:::\n\n:::\n\n::: {.g-col-6}\n\n::: {.cell}\n\n```{.python .cell-code}\n(diamonds_polars\n  .select([\n    pl.col('^c.*$') + '_x'\n  ])\n).to_pandas()\n```\n:::\n\n:::\n::::::::::::::\n\n\n\n###### Apply to columns of a certain type\n\n:::::::::::::: {.grid}\n::: {.g-col-6}\n\n::: {.cell}\n\n```{.r .cell-code}\ndiamonds %>% \n  mutate(across(.cols=where(is.numeric),\n                .fns=~. * 1000))\n```\n:::\n\n:::\n\n::: {.g-col-6}\n\n::: {.cell}\n\n```{.python .cell-code}\n(diamonds_polars\n  .with_columns([\n    pl.col([pl.Float64,pl.Int32]) * 1000\n  ])\n).to_pandas()\n```\n:::\n\n:::\n::::::::::::::\n\n\n\n\n\n### Joins\n\n\n\n###### Left join\n\t\n:::::::::::::: {.grid}\n::: {.g-col-6}\n\n::: {.cell}\n\n```{.r .cell-code}\nband_members %>% left_join(band_instruments,by=\"name\")\n```\n:::\n\n:::\n\n::: {.g-col-6}\n\n::: {.cell}\n\n```{.python .cell-code}\n(band_members_polars\n  .join(band_instruments_polars,on='name',how='left')\n).to_pandas()\n```\n:::\n\n:::\n::::::::::::::\n\n\n\n###### Inner join\n\t\n:::::::::::::: {.grid}\n::: {.g-col-6}\n\n::: {.cell}\n\n```{.r .cell-code}\nband_members %>% inner_join(band_instruments,by=\"name\")\n```\n:::\n\n:::\n\n::: {.g-col-6}\n\n::: {.cell}\n\n```{.python .cell-code}\n(band_members_polars\n  .join(band_instruments_polars,on='name',how='inner')\n).to_pandas()\n```\n:::\n\n:::\n::::::::::::::\n\n\n\n\n###### Outer join\n\t\n:::::::::::::: {.grid}\n::: {.g-col-6}\n\n::: {.cell}\n\n```{.r .cell-code}\nband_members %>% full_join(band_instruments,by=\"name\")\n```\n:::\n\n:::\n\n::: {.g-col-6}\n\n::: {.cell}\n\n```{.python .cell-code}\n(band_members_polars\n  .join(band_instruments_polars,on='name',how='outer')\n).to_pandas()\n```\n:::\n\n:::\n::::::::::::::\n\n\n###### Anti join\n\t\n:::::::::::::: {.grid}\n::: {.g-col-6}\n\n::: {.cell}\n\n```{.r .cell-code}\nband_members %>% anti_join(band_instruments,by=\"name\")\n```\n:::\n\n:::\n\n::: {.g-col-6}\n\n::: {.cell}\n\n```{.python .cell-code}\n(band_members_polars\n  .join(band_instruments_polars,on='name',how='anti')\n).to_pandas()\n```\n:::\n\n:::\n::::::::::::::\n\n### Pivoting/Reshaping \n\n###### Pivot Longer\n\n:::::::::::::: {.grid}\n::: {.g-col-6}\n\n::: {.cell}\n\n```{.r .cell-code}\ndiamonds %>%\n  pivot_longer(cols=c(x,y,z),names_to=\"axis\",values_to=\"mm\")\n```\n:::\n\n:::\n\n::: {.g-col-6}\n\n::: {.cell}\n\n```{.python .cell-code}\n(diamonds_polars\n  .melt(id_vars=list(set(diamonds_polars.columns).difference(['x','y','z'])),variable_name='variable',value_name='value')\n).to_pandas()\n```\n:::\n\n:::\n::::::::::::::\n\n\n\n\n###### Pivot Wider\n\n:::::::::::::: {.grid}\n::: {.g-col-6}\n\n::: {.cell}\n\n```{.r .cell-code}\ndiamonds %>%\n  pivot_wider(id_cols=clarity,names_from=cut,values_from=price,values_fn=mean)\n```\n:::\n\n:::\n\n::: {.g-col-6}\n\n::: {.cell}\n\n```{.python .cell-code}\n(diamonds_polars\n  .pivot(index='clarity',values='price',columns='cut',aggregate_fn='mean')\n).to_pandas()\n```\n:::\n\n:::\n::::::::::::::\n\n\n\n### Nested columns\n\n###### Split string column into nested list, unnest into long format\n\n:::::::::::::: {.grid}\n::: {.g-col-6}\n\n::: {.cell}\n\n```{.r .cell-code}\ndiamonds %>%\n  mutate(cut_word=str_split(cut,\" \")) %>%\n  unnest(cut_word)\n```\n:::\n\n:::\n\n::: {.g-col-6}\n\n::: {.cell}\n\n```{.python .cell-code}\n(diamonds_polars\n  .with_columns([\n    pl.col('cut').cast(pl.Utf8).str.split(' ').alias('cut_word'),\n  ])\n  .explode('cut_word')\n).to_pandas()\n```\n:::\n\n:::\n::::::::::::::\n\n\n\n\n###### Group by a variable and tally others in a nested field\n\n:::::::::::::: {.grid}\n::: {.g-col-6}\n\n::: {.cell}\n\n```{.r .cell-code}\ndiamonds %>% \n  group_by(cut) %>%\n  summarize(clarity_table=list(table(clarity)),\n            .groups=\"drop\")\n```\n:::\n\n:::\n\n::: {.g-col-6}\n\n::: {.cell}\n\n```{.python .cell-code}\n(diamonds_polars\n  .groupby('cut')\n  .agg([\n    pl.col('clarity').value_counts().alias('clarity_counts')\n  ])\n).to_pandas()\n```\n:::\n\n:::\n::::::::::::::\n\n\n\n\n###### Move columns into single nested column, then unnest to individual columns again.\n\n:::::::::::::: {.grid}\n::: {.g-col-6}\n\n::: {.cell}\n\n```{.r .cell-code}\ndiamonds %>%\n  nest(col_color_clarity=c(cut,color,clarity)) %>%\n  unnest(col_color_clarity)\n```\n:::\n\n:::\n\n::: {.g-col-6}\n\n::: {.cell}\n\n```{.python .cell-code}\n(diamonds_polars\n  .with_columns([\n    pl.struct(pl.col(['cut','color','clarity'])).alias('cut_color_clarity')\n  ])\n  .drop(['cut','color','clarity'])\n  .unnest('cut_color_clarity')\n).to_pandas()\n```\n:::\n\n:::\n::::::::::::::\n\n\n\n\n\n###### Nested table in a single column, by group\n\n\n:::::::::::::: {.grid}\n::: {.g-col-6}\n\n::: {.cell}\n\n```{.r .cell-code}\ndiamonds %>%\n  group_by(color) %>%\n  nest(group_info=-color) %>%\n  ungroup()\n```\n:::\n\n:::\n\n::: {.g-col-6}\n\n::: {.cell}\n\n```{.python .cell-code}\n(diamonds_polars\n  .groupby('color')\n  .agg([\n    pl.struct(pl.all().exclude('color')).alias('group_info')\n  ])\n).to_pandas()\n```\n:::\n\n:::\n::::::::::::::\n\n\n\n\n\n<!-- ###### xxxx -->\n\n<!-- :::::::::::::: {.grid} -->\n<!-- ::: {.g-col-6} -->\n<!-- ```{r} -->\n<!-- diamonds     # r code -->\n<!-- ``` -->\n<!-- ::: -->\n<!-- ::: {.column width=\"2%\"} -->\n<!-- <!-- empty column to create gap --> -->\n<!-- ::: -->\n<!-- ::: {.g-col-6} -->\n<!-- ```{python} -->\n<!-- diamonds_polars.to_pandas()    # python -->\n<!-- ``` -->\n<!-- ::: -->\n<!-- :::::::::::::: -->\n\n\n\n\n<!-- ###### xxxx -->\n\n<!-- :::::::::::::: {.grid} -->\n<!-- ::: {.g-col-6} -->\n<!-- ```{r} -->\n<!-- diamonds     # r code -->\n<!-- ``` -->\n<!-- ::: -->\n<!-- ::: {.column width=\"2%\"} -->\n<!-- <!-- empty column to create gap --> -->\n<!-- ::: -->\n<!-- ::: {.g-col-6} -->\n<!-- ```{python} -->\n<!-- diamonds_polars.to_pandas()    # python -->\n<!-- ``` -->\n<!-- ::: -->\n<!-- :::::::::::::: -->\n\n\n\n\n\n\n<!-- ###### xxxx -->\n\n<!-- :::::::::::::: {.grid} -->\n<!-- ::: {.g-col-6} -->\n<!-- ```{r} -->\n<!-- diamonds     # r code -->\n<!-- ``` -->\n<!-- ::: -->\n<!-- ::: {.column width=\"2%\"} -->\n<!-- <!-- empty column to create gap --> -->\n<!-- ::: -->\n<!-- ::: {.g-col-6} -->\n<!-- ```{python} -->\n<!-- diamonds_polars.to_pandas()    # python -->\n<!-- ``` -->\n<!-- ::: -->\n<!-- :::::::::::::: -->\n\n\n\n\n<!-- ###### xxxx -->\n\n<!-- :::::::::::::: {.grid} -->\n<!-- ::: {.g-col-6} -->\n<!-- ```{r} -->\n<!-- diamonds     # r code -->\n<!-- ``` -->\n<!-- ::: -->\n<!-- ::: {.column width=\"2%\"} -->\n<!-- <!-- empty column to create gap --> -->\n<!-- ::: -->\n<!-- ::: {.g-col-6} -->\n<!-- ```{python} -->\n<!-- diamonds_polars.to_pandas()    # python -->\n<!-- ``` -->\n<!-- ::: -->\n<!-- :::::::::::::: -->\n\n\n\n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}