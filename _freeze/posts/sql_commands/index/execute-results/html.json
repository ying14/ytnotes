{
  "hash": "05c0ddfcce58cdcdc4c3fe4e651ffc42",
  "result": {
    "markdown": "---\ntitle: \"SQL Commands\"\nformat: html\neditor: source\ncategories: [sql]\nfontsize: small #small, medium, large, 1.2em, 12px, ...\nexecute:\n  echo: true #whether to include code block\n  eval: false #whether to run code\n  warning: false #include warnings\n  error: false #include errors\n  output: false #include output  \n---\n\n\nCreate a SQL object in R\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(dbplyr)\ncon <- DBI::dbConnect(RSQLite::SQLite(), \":memory:\")\ncopy_to(con, diamonds)\ndiamonds2 <- tbl(con, \"diamonds\")\ndiamonds2\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# Source:   table<diamonds> [?? x 10]\n# Database: sqlite 3.39.4 [:memory:]\n   carat cut       color clarity depth table price     x     y     z\n   <dbl> <chr>     <chr> <chr>   <dbl> <dbl> <int> <dbl> <dbl> <dbl>\n 1  0.23 Ideal     E     SI2      61.5    55   326  3.95  3.98  2.43\n 2  0.21 Premium   E     SI1      59.8    61   326  3.89  3.84  2.31\n 3  0.23 Good      E     VS1      56.9    65   327  4.05  4.07  2.31\n 4  0.29 Premium   I     VS2      62.4    58   334  4.2   4.23  2.63\n 5  0.31 Good      J     SI2      63.3    58   335  4.34  4.35  2.75\n 6  0.24 Very Good J     VVS2     62.8    57   336  3.94  3.96  2.48\n 7  0.24 Very Good I     VVS1     62.3    57   336  3.95  3.98  2.47\n 8  0.26 Very Good H     SI1      61.9    55   337  4.07  4.11  2.53\n 9  0.22 Fair      E     VS2      65.1    61   337  3.87  3.78  2.49\n10  0.23 Very Good H     VS1      59.4    61   338  4     4.05  2.39\n# â€¦ with more rows\n```\n:::\n:::\n\n\n\n\n\n### Filter by column criteria\n\n:::::::::::::: {.columns}\n::: {.column width=\"49%\"}\n\n::: {.cell}\n\n```{.r .cell-code}\ndiamonds %>% \n  filter(clarity==\"VVS1\",\n         price>2000,\n         grepl(\"good\",cut,ignore.case=TRUE))\n```\n:::\n\n:::\n::: {.column width=\"2%\"}\n\n::: {.cell}\n\n:::\n\n<!-- empty column to create gap -->\n:::\n::: {.column width=\"49%\"}\n\n::: {.cell}\n\n```{.sql .cell-code}\nSELECT *\nFROM diamonds\nWHERE\n  clarity = 'VVS1' AND\n  price > 2000 AND\n  LOWER(cut) like '%good%'\n\n```\n:::\n\n:::\n::::::::::::::\n\n\n### Summarize by group\n\n:::::::::::::: {.columns}\n::: {.column width=\"49%\"}\n\n::: {.cell}\n\n```{.r .cell-code}\ndiamonds %>%\n  group_by(cut,color) %>% \n  summarize(n=n(),\n            min_price=min(price),\n            max_price=max(price),\n            mean_price=mean(price),\n            n_distinct_price=n_distinct(price),\n            .groups=\"drop\") \n```\n:::\n\n:::\n::: {.column width=\"2%\"}\n\n::: {.cell}\n\n:::\n\n<!-- empty column to create gap -->\n:::\n::: {.column width=\"49%\"}\n\n::: {.cell}\n\n```{.sql .cell-code}\nSELECT\n  cut,\n  color,\n  COUNT(*) AS n,\n  MIN(price) AS min_price,\n  MAX(price) AS max_price,\n  AVG(price) AS mean_price,\n  COUNT(DISTINCT price) AS n_distinct_price\nFROM diamonds\nGROUP BY cut, color\n```\n:::\n\n:::\n::::::::::::::\n\n\n\n\n\n\n\n\n\n### calculations by window\n\n:::::::::::::: {.columns}\n::: {.column width=\"49%\"}\n\n::: {.cell}\n\n```{.r .cell-code}\ndiamonds %>%\n  select(cut,price) %>% \n  mutate(rownumber=row_number(),\n         price_rank=row_number(price),\n         total_rows=n()) %>%\n  group_by(cut) %>%\n  mutate(total_rows_in_group=n(),\n         rownumber_in_group=row_number(),\n         price_rank_in_group=row_number(price)) %>%\n  ungroup()\n```\n:::\n\n:::\n::: {.column width=\"2%\"}\n\n::: {.cell}\n\n:::\n\n<!-- empty column to create gap -->\n:::\n::: {.column width=\"49%\"}\n\n::: {.cell}\n\n```{.sql .cell-code}\nSELECT\n  cut,\n  price,\n  ROW_NUMBER() OVER () AS rownumber,\n  ROW_NUMBER() OVER (ORDER BY price) AS price_rank,\n  COUNT(*) OVER () AS total_rows,\n  ROW_NUMBER() OVER (PARTITION BY cut) AS rownumber_in_group,\n  ROW_NUMBER() OVER (PARTITION BY cut ORDER BY price) AS price_rank_in_group,\n  COUNT(*) OVER (PARTITION BY cut) AS total_rows_in_group\nFROM diamonds\n```\n:::\n\n:::\n::::::::::::::\n\n\n\n\n\n\n\n<!-- ### xxxxxxxxxxxxxxxxxxxxxxx -->\n\n<!-- :::::::::::::: {.columns} -->\n<!-- ::: {.column width=\"49%\"} -->\n<!-- ```{r} -->\n<!-- diamonds -->\n<!-- ``` -->\n<!-- ::: -->\n<!-- ::: {.column width=\"2%\"} -->\n<!-- ```{r} -->\n<!-- #| eval: false -->\n<!-- #| echo: false -->\n<!-- ######work -->\n<!-- diamonds2 %>%  -->\n<!--   ################### -->\n<!--   sql_render() %>% as.character() %>% gsub(\"`\",\"\",.) %>% cat() -->\n<!-- ``` -->\n<!-- <!-- empty column to create gap --> -->\n<!-- ::: -->\n<!-- ::: {.column width=\"49%\"} -->\n<!-- ```{sql, connection=con} -->\n<!-- SELECT * -->\n<!-- FROM diamonds -->\n<!-- ``` -->\n<!-- ::: -->\n<!-- :::::::::::::: -->\n\n\n\n\n\n<!-- ### xxxxxxxxxxxxxxxxxxxxxxx -->\n\n<!-- :::::::::::::: {.columns} -->\n<!-- ::: {.column width=\"49%\"} -->\n<!-- ```{r} -->\n<!-- diamonds -->\n<!-- ``` -->\n<!-- ::: -->\n<!-- ::: {.column width=\"2%\"} -->\n<!-- ```{r} -->\n<!-- #| eval: false -->\n<!-- #| echo: false -->\n<!-- ######work -->\n<!-- diamonds2 %>%  -->\n<!--   ################### -->\n<!--   sql_render() %>% as.character() %>% gsub(\"`\",\"\",.) %>% cat() -->\n<!-- ``` -->\n<!-- <!-- empty column to create gap --> -->\n<!-- ::: -->\n<!-- ::: {.column width=\"49%\"} -->\n<!-- ```{sql, connection=con} -->\n<!-- SELECT * -->\n<!-- FROM diamonds -->\n<!-- ``` -->\n<!-- ::: -->\n<!-- :::::::::::::: -->\n\n\n\n\n<!-- ### xxxxxxxxxxxxxxxxxxxxxxx -->\n\n<!-- :::::::::::::: {.columns} -->\n<!-- ::: {.column width=\"49%\"} -->\n<!-- ```{r} -->\n<!-- diamonds -->\n<!-- ``` -->\n<!-- ::: -->\n<!-- ::: {.column width=\"2%\"} -->\n<!-- ```{r} -->\n<!-- #| eval: false -->\n<!-- #| echo: false -->\n<!-- ######work -->\n<!-- diamonds2 %>%  -->\n<!--   ################### -->\n<!--   sql_render() %>% as.character() %>% gsub(\"`\",\"\",.) %>% cat() -->\n<!-- ``` -->\n<!-- <!-- empty column to create gap --> -->\n<!-- ::: -->\n<!-- ::: {.column width=\"49%\"} -->\n<!-- ```{sql, connection=con} -->\n<!-- SELECT * -->\n<!-- FROM diamonds -->\n<!-- ``` -->\n<!-- ::: -->\n<!-- :::::::::::::: -->\n\n\n\n\n\n\nCheck if `B` is a subset of `A`:\n\n```sql\nSELECT * \nFROM B\nWHERE NOT EXISTS (SELECT 1 \n                   FROM   A \n                   WHERE  A.ID = B.ID)\n```\n\n\n\n\n\n\n\n```sql\nwith\nw (mrn, ord_id, test_date) as\n( select distinct LR_MRN, LR_ORD_ID, LR_PERFORMED_DTE from\nidb.LAB_TEXT_LINE\nJOIN idb.LAB_RESULTS\non LR_MRN=LTL_MRN\nand LR_PERFORMED_DTE=LTL_PERFORMED_DTE\nand LR_RESULT_GUID=LTL_RESULT_GUID\n\nx (key, val, rnum) AS\n( SELECT LTL_RESULT_GUID, LTL_TEXT_RESULT, LTL_LINE_NO\nFROM idb.LAB_TEXT_LINE\nJOIN idb.LAB_RESULTS\non LR_MRN=LTL_MRN\nand LR_PERFORMED_DTE=LTL_PERFORMED_DTE\nand LR_RESULT_GUID=LTL_RESULT_GUID\njoin w\non LR_MRN=mrn\nand LR_ORD_ID=ord_id\nand LR_PERFORMED_DTE=test_date),\n\ny(key, str, cnt, cnt_max) AS\n( SELECT key, VARCHAR('', 14025), 0, MAX(rnum)\nFROM x\nGROUP BY key\nUNION ALL\nSELECT y.key, y.str || RTRIM(CHAR(x.val)), y.cnt + 1, y.cnt_max\nFROM x, y\nWHERE x.key = y.key AND\nx.rnum = y.cnt + 1 AND\ny.cnt < y.cnt_max ),\n\nz as (SELECT key, str\nFROM y\nWHERE y.cnt = y.cnt_max)\n\nselect * from idb.LAB_RESULTS left join z\non LR_RESULT_GUID=KEY\n```\n\n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}