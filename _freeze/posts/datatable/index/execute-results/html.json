{
  "hash": "352cba55ea9213433309974d6dc1114a",
  "result": {
    "markdown": "---\ntitle: \"Datatable notes\"\ndescription: Command reference for the `datatable` package\nformat: html\neditor: source\ncategories: [r]\ntoc: true\ntoc-depth: 6\ntoc-location: right\nfontsize: small #small, medium, large, 1.2em, 12px, ...\nexecute:\n  echo: true #whether to include code block\n  eval: false #whether to run code\n  warning: false #include warnings\n  error: false #include errors\n  output: false #include output\n  # include: false #catch all for  preventing any results (code + results)\n---\n\n\n\n\n\n\n### Load package and data \n\n:::::::::::::: {.columns}\n::: {.column width=\"49%\"}\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\ndiamonds\nband_members\nband_instruments\n```\n:::\n\n:::\n::: {.column width=\"2%\"}\n<!-- empty column to create gap -->\n:::\n::: {.column width=\"49%\"}\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(data.table)\ndiamonds.dt <- diamonds %>% as.data.table()\nband_members.dt <- band_members %>% as.data.table()\nband_instruments.dt <- band_instruments %>% as.data.table()\n```\n:::\n\n:::\n::::::::::::::\n\n\n\n\n###### Generate a data frame from scratch\n\n:::::::::::::: {.columns}\n::: {.column width=\"49%\"}\n\n::: {.cell}\n\n```{.r .cell-code}\ntibble(\n  id=1:3,\n  color=c(\"blue\",\"red\",\"green\"),\n  size=c(\"small\",\"medium\",\"large\")\n)\n```\n:::\n\n:::\n::: {.column width=\"2%\"}\n<!-- empty column to create gap -->\n:::\n::: {.column width=\"49%\"}\n\n::: {.cell}\n\n```{.r .cell-code}\ndata.table(\n  id=1:3,\n  color=c(\"blue\",\"red\",\"green\"),\n  size=c(\"small\",\"medium\",\"large\")\n)\n```\n:::\n\n:::\n::::::::::::::\n\n\n\n\n###### Read in a TSV file, explicitly\n\n:::::::::::::: {.columns}\n::: {.column width=\"49%\"}\n\n::: {.cell}\n\n```{.r .cell-code}\nfile <- \"C:/Users/Ying/Desktop/samples/mock/Sample_GutZymo1_IGO_13699_36.kaiju_summary1.tsv\"\ncols <- list(\n  \"outfile\"=col_character(), \n  \"percent\"=col_double(),\n  \"numseqs\"=col_integer(),\n  \"taxid\"=col_character(), \n  \"taxon_name\"=col_skip()\n)\ntable <- read_tsv(file,skip=1,col_names=names(cols),col_types=cols, na=c(\"\", \"NA\"))\n```\n:::\n\n:::\n::: {.column width=\"2%\"}\n<!-- empty column to create gap -->\n:::\n::: {.column width=\"49%\"}\n\n::: {.cell}\n\n```{.r .cell-code}\nfile <- \"C:/Users/Ying/Desktop/samples/mock/Sample_GutZymo1_IGO_13699_36.kaiju_summary1.tsv\"\ncols2 <- c(\n  \"outfile\"=\"character\", \n  \"percent\"=\"numeric\",\n  \"numseqs\"=\"numeric\",\n  \"taxid\"=\"character\",\n  \"taxon_name\"=NA\n)\ndrop <- which(is.na(cols)) %>% unname()\ncol.names <- names(cols)[!is.na(cols)]\ncolClasses <- cols[!is.na(cols)] %>% {setNames(seq_along(.),.)} %>% as.list()\ntable2 <- fread(file,header=TRUE,\n                drop=drop,col.names = col.names,\n                colClasses=colClasses,na.strings=c(\"\",\"NA\"))\n```\n:::\n\n:::\n::::::::::::::\n\n\n\n\n\n### Row/Column Filtering\n\n###### Extract top 3 rows\n\n:::::::::::::: {.columns}\n::: {.column width=\"49%\"}\n\n::: {.cell}\n\n```{.r .cell-code}\ndiamonds[1:3,] #method 1\nhead(diamonds,3) #method 2\ndiamonds %>% slice(1:3) #method 3\n```\n:::\n\n:::\n::: {.column width=\"2%\"}\n<!-- empty column to create gap -->\n:::\n::: {.column width=\"49%\"}\n\n::: {.cell}\n\n```{.r .cell-code}\ndiamonds.dt[1:3,] #method 1\ndiamonds.dt[1:3] #method 2\n```\n:::\n\n:::\n::::::::::::::\n\n\n###### Multiple row filter criteria\n\n:::::::::::::: {.columns}\n::: {.column width=\"49%\"}\n\n::: {.cell}\n\n```{.r .cell-code}\ndiamonds %>% \n  filter(clarity==\"VVS1\",\n         price>2000,\n         grepl(\"[DEF]\",color))\n```\n:::\n\n:::\n::: {.column width=\"2%\"}\n<!-- empty column to create gap -->\n:::\n::: {.column width=\"49%\"}\n\n::: {.cell}\n\n```{.r .cell-code}\ndiamonds.dt[clarity==\"VVS1\" & \n              price>2000 & \n              grepl(\"[DEF]\",color)]\n```\n:::\n\n:::\n::::::::::::::\n\n\n\n\n### Select/Rename columns\n\n\n###### Routine select\n\n:::::::::::::: {.columns}\n::: {.column width=\"49%\"}\n\n::: {.cell}\n\n```{.r .cell-code}\ndiamonds %>% select(carat,cut,clarity)\n```\n:::\n\n:::\n::: {.column width=\"2%\"}\n<!-- empty column to create gap -->\n:::\n::: {.column width=\"49%\"}\n\n::: {.cell}\n\n```{.r .cell-code}\ndiamonds.dt <- diamonds %>% as.data.table()\n#method 1\ndiamonds.dt[, c(\"carat\",\"cut\",\"clarity\")] \n#method 2\ndiamonds.dt[, list(carat,cut,clarity)] \n#method 3\ncols <- c(\"carat\",\"cut\",\"clarity\") \ndiamonds.dt[, ..cols]\n#method 4\ndiamonds.dt[, .(carat,cut,clarity)] \n```\n:::\n\n:::\n::::::::::::::\n\n\n\n###### Select columns using regex pattern\n\n:::::::::::::: {.columns}\n::: {.column width=\"49%\"}\n\n::: {.cell}\n\n```{.r .cell-code}\ndiamonds %>% select(matches(\"^c\"))\n```\n:::\n\n:::\n::: {.column width=\"2%\"}\n<!-- empty column to create gap -->\n:::\n::: {.column width=\"49%\"}\n\n::: {.cell}\n\n```{.r .cell-code}\n#method 1\ncols <- grep(\"^c\",  names(diamonds.dt)) \ndiamonds.dt[, ..cols]\n#method 2\ndiamonds.dt[, .SD, .SDcols=patterns(\"^c\")] \n```\n:::\n\n:::\n::::::::::::::\n\n\n\n###### Select columns of a certain type\n\n:::::::::::::: {.columns}\n::: {.column width=\"49%\"}\n\n::: {.cell}\n\n```{.r .cell-code}\ndiamonds %>% select(where(is.factor))\n```\n:::\n\n:::\n::: {.column width=\"2%\"}\n<!-- empty column to create gap -->\n:::\n::: {.column width=\"49%\"}\n\n::: {.cell}\n\n```{.r .cell-code}\ndiamonds.dt[, .SD, .SDcols = is.factor]\n```\n:::\n\n:::\n::::::::::::::\n\n\n\n\n\n###### Select all columns _except_ those specified\n\n:::::::::::::: {.columns}\n::: {.column width=\"49%\"}\n\n::: {.cell}\n\n```{.r .cell-code}\ndiamonds %>% select(-c(x,y,z))\n```\n:::\n\n:::\n::: {.column width=\"2%\"}\n<!-- empty column to create gap -->\n:::\n::: {.column width=\"49%\"}\n\n::: {.cell}\n\n```{.r .cell-code}\n#method 1\ndiamonds.dt[, !c(\"x\",\"y\",\"z\")]\n#method 2\ncols <- c(\"x\",\"y\",\"z\") \ndiamonds.dt[, -..cols]\n```\n:::\n\n:::\n::::::::::::::\n\n\n\n###### Select columns and rename\n\n:::::::::::::: {.columns}\n::: {.column width=\"49%\"}\n\n::: {.cell}\n\n```{.r .cell-code}\ndiamonds %>% select(price_usd=price,length=x,width=y,depth=z)\n```\n:::\n\n:::\n::: {.column width=\"2%\"}\n<!-- empty column to create gap -->\n:::\n::: {.column width=\"49%\"}\n\n::: {.cell}\n\n```{.r .cell-code}\n# by reference!\nsetnames(diamonds.dt,\n         old=c(\"price\",\"x\",\"y\",\"z\"),\n         new=c(\"price_usd\",\"length\",\"width\",\"depth\"))\n```\n:::\n\n:::\n::::::::::::::\n\n\n\n###### Select all columns and add prefix\n\n:::::::::::::: {.columns}\n::: {.column width=\"49%\"}\n\n::: {.cell}\n\n```{.r .cell-code}\ndiamonds %>% rename_with(.fn=~paste0(\"var_\",.))\n```\n:::\n\n:::\n::: {.column width=\"2%\"}\n<!-- empty column to create gap -->\n:::\n::: {.column width=\"49%\"}\n\n::: {.cell}\n\n```{.r .cell-code}\n# by reference!\nsetnames(diamonds.dt,\n         old=names(diamonds.dt),\n         new=paste0(\"var_\",names(diamonds.dt)))\n```\n:::\n\n:::\n::::::::::::::\n\n\n\n\n###### Select and programmatically rename\n\n:::::::::::::: {.columns}\n::: {.column width=\"49%\"}\n\n::: {.cell}\n\n```{.r .cell-code}\nvarmap <- c(\"price_usd\"=\"price\",\n            \"length\"=\"x\",\n            \"width\"=\"y\",\n            \"depth\"=\"z\")\ndiamonds %>% select(!!!varmap)\n```\n:::\n\n:::\n::: {.column width=\"2%\"}\n<!-- empty column to create gap -->\n:::\n::: {.column width=\"49%\"}\n\n::: {.cell}\n\n```{.r .cell-code}\n# by reference!\nvarmap <- c(\"price_usd\"=\"price\",\n            \"length\"=\"x\",\n            \"width\"=\"y\",\n            \"depth\"=\"z\")\nsetnames(diamonds.dt,old=varmap,new=names(varmap))\n```\n:::\n\n:::\n::::::::::::::\n\n\n\n### Mutate/Transmute\n\n\n###### Mutate\n\n:::::::::::::: {.columns}\n::: {.column width=\"49%\"}\n\n::: {.cell}\n\n```{.r .cell-code}\ndiamonds %>%\n  mutate(price_thousands=price*1000,\n         log_price=log(price),\n         xyz=paste(x,y,z,sep=\"+\"))\n```\n:::\n\n:::\n::: {.column width=\"2%\"}\n<!-- empty column to create gap -->\n:::\n::: {.column width=\"49%\"}\n\n::: {.cell}\n\n```{.r .cell-code}\ndiamonds.dt <- diamonds %>% as.data.table()\n# by reference!\n#method 1\n(diamonds.dt[, price_thousands:=price*1000]\n            [, log_price:=log(price)]\n            [,xyz:=paste(x,y,z,sep=\"+\")])\n#method 2\ndiamonds.dt[, c(\"price_thousands\",\"log_price\",\"xyz\"):=.(price*1000,\n                                                        log(price),\n                                                        paste(x,y,z,sep=\"+\"))]\n#method 3\ndiamonds.dt[, ':='(price_thousands=price*1000,\n                   log_price=log(price),\n                   xyz=paste(x,y,z,sep=\"+\"))]\n```\n:::\n\n:::\n::::::::::::::\n\n\n###### Transmute\n\n:::::::::::::: {.columns}\n::: {.column width=\"49%\"}\n\n::: {.cell}\n\n```{.r .cell-code}\ndiamonds %>%\n  transmute(\n    color_is_DEF=color %in% c(\"D\",\"E\",\"F\"),\n    clarity=str_to_title(clarity),\n    cut.rating=if_else(cut %in% c(\"Ideal\",\"Premium\"),\"great\",\"ok\"),\n    color_status=case_when(\n      color==\"J\" ~ \"very poor\",\n      color %in% c(\"H\",\"I\") ~ \"poor\",\n      color %in% c(\"F\",\"G\") ~ \"ok\",\n      TRUE ~ \"excellent\"\n    ))\n```\n:::\n\n:::\n::: {.column width=\"2%\"}\n<!-- empty column to create gap -->\n:::\n::: {.column width=\"49%\"}\n\n::: {.cell}\n\n```{.r .cell-code}\ndiamonds.dt <- diamonds %>% as.data.table()\n\ndiamonds.dt[,.(color_is_DEF=color %in% c(\"D\",\"E\",\"F\"),\n               clarity=str_to_title(clarity),\n               cut.rating=fifelse(cut %in% c(\"Ideal\",\"Premium\"),\"great\",\"ok\"),\n               color_status=fcase(\n                 color==\"J\", \"very poor\",\n                 color %in% c(\"H\",\"I\"), \"poor\",\n                 color %in% c(\"F\",\"G\"), \"ok\",\n                 default = \"excellent\"))]\n```\n:::\n\n:::\n::::::::::::::\n\n\n\n\n\n### Group By and Summarize\n\n\n###### Count rows by group\n\n:::::::::::::: {.columns}\n::: {.column width=\"49%\"}\n\n::: {.cell}\n\n```{.r .cell-code}\ndiamonds %>% \n  group_by(cut,color) %>%\n  summarize(n=n(),\n            .groups=\"drop\")\n\ndiamonds %>% count(cut,color) #shortcut\n```\n:::\n\n:::\n::: {.column width=\"2%\"}\n<!-- empty column to create gap -->\n:::\n::: {.column width=\"49%\"}\n\n::: {.cell}\n\n```{.r .cell-code}\ndiamonds.dt <- diamonds %>% as.data.table()\n\ndiamonds.dt[, .(n=.N), by = c(\"cut\",\"color\")]\n```\n:::\n\n:::\n::::::::::::::\n\n###### Calculate various summaries by group\n\n:::::::::::::: {.columns}\n::: {.column width=\"49%\"}\n\n::: {.cell}\n\n```{.r .cell-code}\ndiamonds %>%\n  group_by(cut) %>%\n  summarize(n=n(),\n            mean_price=mean(price),\n            max_price=max(price),\n            available_colors=paste(sort(unique(color)),collapse=\", \"),\n            .groups=\"drop\")\n```\n:::\n\n:::\n::: {.column width=\"2%\"}\n<!-- empty column to create gap -->\n:::\n::: {.column width=\"49%\"}\n\n::: {.cell}\n\n```{.r .cell-code}\ndiamonds.dt <- diamonds %>% as.data.table()\n\ndiamonds.dt[, by=cut,\n            .(n=.N,\n              mean_price=mean(price),\n              max_price=max(price),\n              available_colors=paste(sort(unique(color)),collapse=\", \"))] \n```\n:::\n\n:::\n::::::::::::::\n\n\n###### Select first row after sorting, by group\n\n:::::::::::::: {.columns}\n::: {.column width=\"49%\"}\n\n::: {.cell}\n\n```{.r .cell-code}\ndiamonds %>%\n  group_by(cut) %>%\n  arrange(desc(price),depth) %>%\n  slice(1) %>%\n  ungroup()\n```\n:::\n\n:::\n::: {.column width=\"2%\"}\n<!-- empty column to create gap -->\n:::\n::: {.column width=\"49%\"}\n\n::: {.cell}\n\n```{.r .cell-code}\ndiamonds.dt <- diamonds %>% as.data.table()\n\n\n(diamonds.dt[,.SD[order(-price,depth)], by=cut]\n  [,.SD[1], by=cut])\n\ndiamonds.dt[,.SD[order(-price,depth)][1], by=cut]\n```\n:::\n\n:::\n::::::::::::::\n\n\n\n\n### Apply function across columns\n\n###### Apply to all columns\n\n:::::::::::::: {.columns}\n::: {.column width=\"49%\"}\n\n::: {.cell}\n\n```{.r .cell-code}\ndiamonds %>% \n  mutate(across(.fns=~paste0(.,\"_xyz\")))\n```\n:::\n\n:::\n::: {.column width=\"2%\"}\n<!-- empty column to create gap -->\n:::\n::: {.column width=\"49%\"}\n\n::: {.cell}\n\n```{.r .cell-code}\ndiamonds.dt <- diamonds %>% as.data.table()\n\ndiamonds.dt[,lapply(.SD, function(x) paste0(x,\"_xyz\"))]\n```\n:::\n\n:::\n::::::::::::::\n\n\n\n\n###### Apply to columns using regex\n\n:::::::::::::: {.columns}\n::: {.column width=\"49%\"}\n\n::: {.cell}\n\n```{.r .cell-code}\ndiamonds %>%\n  transmute(across(.cols=matches(\"^c\"),.fns=~paste0(.,\"_x\")))\n```\n:::\n\n:::\n::: {.column width=\"2%\"}\n<!-- empty column to create gap -->\n:::\n::: {.column width=\"49%\"}\n\n::: {.cell}\n\n```{.r .cell-code}\ndiamonds.dt <- diamonds %>% as.data.table()\n\ndiamonds.dt[,lapply(.SD,function(x) paste0(x,\"_x\")),\n            .SDcols=patterns(\"^c\")]\n```\n:::\n\n:::\n::::::::::::::\n\n\n\n###### Apply to columns of a certain type\n\n:::::::::::::: {.columns}\n::: {.column width=\"49%\"}\n\n::: {.cell}\n\n```{.r .cell-code}\ndiamonds %>%\n  mutate(across(.cols=where(is.numeric),\n                .fns=~. * 1000))\n```\n:::\n\n:::\n::: {.column width=\"2%\"}\n<!-- empty column to create gap -->\n:::\n::: {.column width=\"49%\"}\n\n::: {.cell}\n\n```{.r .cell-code}\ndiamonds.dt <- diamonds %>% as.data.table()\n\ndiamonds.dt[,lapply(.SD,function(x) {\n  if (is.numeric(x)) x*1000 else x\n})]\n```\n:::\n\n:::\n::::::::::::::\n\n\n\n\n\n### Joins\n\n\n\n###### Left join\n\n:::::::::::::: {.columns}\n::: {.column width=\"49%\"}\n\n::: {.cell}\n\n```{.r .cell-code}\nband_members %>% left_join(band_instruments,by=\"name\")\n```\n:::\n\n:::\n::: {.column width=\"2%\"}\n<!-- empty column to create gap -->\n:::\n::: {.column width=\"49%\"}\n\n::: {.cell}\n\n```{.r .cell-code}\nband_instruments.dt[band_members.dt, on = \"name\"]\n\nmerge(band_members.dt, \n      band_instruments.dt, \n      all.x = TRUE, by = \"name\")\n```\n:::\n\n:::\n::::::::::::::\n\n\n\n###### Inner join\n\n:::::::::::::: {.columns}\n::: {.column width=\"49%\"}\n\n::: {.cell}\n\n```{.r .cell-code}\nband_members %>% inner_join(band_instruments,by=\"name\")\n```\n:::\n\n:::\n::: {.column width=\"2%\"}\n<!-- empty column to create gap -->\n:::\n::: {.column width=\"49%\"}\n\n::: {.cell}\n\n```{.r .cell-code}\nband_members.dt[band_instruments.dt, on=\"name\",nomatch=0]\n\nmerge(band_members.dt, band_instruments.dt, by=\"name\")\n```\n:::\n\n:::\n::::::::::::::\n\n\n\n\n###### Outer join\n\n:::::::::::::: {.columns}\n::: {.column width=\"49%\"}\n\n::: {.cell}\n\n```{.r .cell-code}\nband_members %>% full_join(band_instruments,by=\"name\")\n```\n:::\n\n:::\n::: {.column width=\"2%\"}\n<!-- empty column to create gap -->\n:::\n::: {.column width=\"49%\"}\n\n::: {.cell}\n\n```{.r .cell-code}\nmerge(band_members.dt, band_instruments.dt, all = TRUE, by = \"name\")\n```\n:::\n\n:::\n::::::::::::::\n\n\n###### Anti join\n\n:::::::::::::: {.columns}\n::: {.column width=\"49%\"}\n\n::: {.cell}\n\n```{.r .cell-code}\nband_members %>% anti_join(band_instruments,by=\"name\")\n```\n:::\n\n:::\n::: {.column width=\"2%\"}\n<!-- empty column to create gap -->\n:::\n::: {.column width=\"49%\"}\n\n::: {.cell}\n\n```{.r .cell-code}\nband_members.dt[!band_instruments.dt, on =\"name\"]\n```\n:::\n\n:::\n::::::::::::::\n\n### Pivoting/Reshaping\n\n###### Pivot Longer\n\n:::::::::::::: {.columns}\n::: {.column width=\"49%\"}\n\n::: {.cell}\n\n```{.r .cell-code}\ndiamonds %>%\n  pivot_longer(cols=c(x,y,z),names_to=\"axis\",values_to=\"mm\")\n```\n:::\n\n:::\n::: {.column width=\"2%\"}\n<!-- empty column to create gap -->\n:::\n::: {.column width=\"49%\"}\n\n::: {.cell}\n\n```{.r .cell-code}\nmelt(diamonds.dt,\n     measure.vars = c(\"x\",\"y\",\"z\"),\n     variable.name=\"axis\",\n     value.name=\"mm\")\n```\n:::\n\n:::\n::::::::::::::\n\n\n\n\n###### Pivot Wider\n\n:::::::::::::: {.columns}\n::: {.column width=\"49%\"}\n\n::: {.cell}\n\n```{.r .cell-code}\ndiamonds %>%\n  pivot_wider(id_cols=clarity,names_from=cut,values_from=price,values_fn=mean)\n```\n:::\n\n:::\n::: {.column width=\"2%\"}\n<!-- empty column to create gap -->\n:::\n::: {.column width=\"49%\"}\n\n::: {.cell}\n\n```{.r .cell-code}\ndcast(diamonds.dt,\n      clarity ~ cut, \n      value.var=\"price\",fun.aggregate = mean)\n```\n:::\n\n:::\n::::::::::::::\n\n\n\n### Nested columns\n\n###### Split string column into nested list, unnest into long format\n\n:::::::::::::: {.columns}\n::: {.column width=\"49%\"}\n\n::: {.cell}\n\n```{.r .cell-code}\ndiamonds %>%\n  mutate(cut_word=str_split(cut,\" \")) %>%\n  unnest(cut_word)\n```\n:::\n\n:::\n::: {.column width=\"2%\"}\n<!-- empty column to create gap -->\n:::\n::: {.column width=\"49%\"}\n\n::: {.cell}\n\n```{.r .cell-code}\n# diamonds.dt <- diamonds %>% as.data.table()\n# diamonds.dt[, cut_word:=str_split(cut,\" \")]\n# ????????????????????????\n# diamonds.dt[, .(cut_word=cut_word[[1]]), by=c(...)]\n```\n:::\n\n:::\n::::::::::::::\n\n\n\n\n###### Group by a variable and tally others in a nested field\n\n:::::::::::::: {.columns}\n::: {.column width=\"49%\"}\n\n::: {.cell}\n\n```{.r .cell-code}\ndiamonds %>%\n  group_by(cut) %>%\n  summarize(clarity_table=list(table(clarity)),\n            .groups=\"drop\")\n```\n:::\n\n:::\n::: {.column width=\"2%\"}\n<!-- empty column to create gap -->\n:::\n::: {.column width=\"49%\"}\n\n::: {.cell}\n\n```{.r .cell-code}\n# ????????????????????????\n```\n:::\n\n:::\n::::::::::::::\n\n\n\n\n###### Move columns into single nested column, then unnest to individual columns again.\n\n:::::::::::::: {.columns}\n::: {.column width=\"49%\"}\n\n::: {.cell}\n\n```{.r .cell-code}\ndiamonds %>%\n  nest(col_color_clarity=c(cut,color,clarity)) %>%\n  unnest(col_color_clarity)\n```\n:::\n\n:::\n::: {.column width=\"2%\"}\n<!-- empty column to create gap -->\n:::\n::: {.column width=\"49%\"}\n\n::: {.cell}\n\n```{.r .cell-code}\n# ????????????????????????\n```\n:::\n\n:::\n::::::::::::::\n\n\n\n\n\n###### Nested table in a single column, by group\n\n\n:::::::::::::: {.columns}\n::: {.column width=\"49%\"}\n\n::: {.cell}\n\n```{.r .cell-code}\ndiamonds %>%\n  group_by(color) %>%\n  nest(group_info=-color) %>%\n  ungroup()\n```\n:::\n\n:::\n::: {.column width=\"2%\"}\n<!-- empty column to create gap -->\n:::\n::: {.column width=\"49%\"}\n\n::: {.cell}\n\n```{.r .cell-code}\n# ????????????????????????\n```\n:::\n\n:::\n::::::::::::::\n\n\n\n### Programmatic statements\n\n\n\n###### Inject list of expressions into a group_by/summarize\n\n\n:::::::::::::: {.columns}\n::: {.column width=\"49%\"}\n\n::: {.cell}\n\n```{.r .cell-code}\nbyvar <- c(\"cut\",\"color\",\"clarity\")\ncmds <- rlang::exprs(\n  mean.depth = mean(depth),\n  min.price = min(price),\n  max.price = max(price),\n  n=n()\n)\n\ndiamonds %>%\n  group_by(!!!syms(byvar)) %>%\n  summarize(!!!cmds,\n            .groups=\"drop\")\n```\n:::\n\n:::\n::: {.column width=\"2%\"}\n<!-- empty column to create gap -->\n:::\n::: {.column width=\"49%\"}\n\n::: {.cell}\n\n```{.r .cell-code}\ndiamonds.dt <- diamonds %>% as.data.table()\nbyvar <- c(\"cut\",\"color\",\"clarity\")\ncmds <- rlang::exprs(\n  mean.depth = mean(depth),\n  min.price = min(price),\n  max.price = max(price),\n  n=.N\n)\n\nrlang::inject(diamonds.dt[, .(!!!cmds), by=byvar])\n```\n:::\n\n:::\n::::::::::::::\n\n\n\n\n\n\n\n\n\n\n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}